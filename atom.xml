<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜未央</title>
  
  <subtitle>感恩 &amp; 回馈 | 理解 &amp; 释怀 | 热爱 &amp; 敬畏</subtitle>
  <link href="http://kennethfan.github.io/atom.xml" rel="self"/>
  
  <link href="http://kennethfan.github.io/"/>
  <updated>2018-03-21T02:25:57.000Z</updated>
  <id>http://kennethfan.github.io/</id>
  
  <author>
    <name>Kenneth Fan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>架构师图谱</title>
    <link href="http://kennethfan.github.io/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/"/>
    <id>http://kennethfan.github.io/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/</id>
    <published>2018-03-20T08:44:30.000Z</published>
    <updated>2018-03-21T02:25:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1架构师图谱"><a href="#1-1架构师图谱" class="headerlink" title="1.1架构师图谱"></a>1.1架构师图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.1%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1.jpg" class="" title="1.1架构师图谱"><span id="more"></span><h1 id="1-2Java架构师图谱"><a href="#1-2Java架构师图谱" class="headerlink" title="1.2Java架构师图谱"></a>1.2Java架构师图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.2Java%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1.jpg" class="" title="1.2Java架构师图谱"><h1 id="1-3微服务架构秘籍"><a href="#1-3微服务架构秘籍" class="headerlink" title="1.3微服务架构秘籍"></a>1.3微服务架构秘籍</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%A7%98%E7%B1%8D.jpg" class="" title="1.3微服务架构秘籍"><h1 id="1-4一致性图谱"><a href="#1-4一致性图谱" class="headerlink" title="1.4一致性图谱"></a>1.4一致性图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.4%E4%B8%80%E8%87%B4%E6%80%A7%E5%9B%BE%E8%B0%B1.jpg" class="" title="1.4一致性图谱"><h1 id="1-5互联网大流量的方法"><a href="#1-5互联网大流量的方法" class="headerlink" title="1.5互联网大流量的方法"></a>1.5互联网大流量的方法</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.5%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E6%B5%81%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95.jpg" class="" title="1.5互联网大流量的方法"><h1 id="1-6安全秘籍"><a href="#1-6安全秘籍" class="headerlink" title="1.6安全秘籍"></a>1.6安全秘籍</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.6%E5%AE%89%E5%85%A8%E7%A7%98%E7%B1%8D.jpg" class="" title="1.6安全秘籍"><h1 id="1-7阿里巴巴常用小框架"><a href="#1-7阿里巴巴常用小框架" class="headerlink" title="1.7阿里巴巴常用小框架"></a>1.7阿里巴巴常用小框架</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.7%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%B8%B8%E7%94%A8%E5%B0%8F%E6%A1%86%E6%9E%B6.jpg" class="" title="1.7阿里巴巴常用小框架"><h1 id="1-8架构方法论图谱"><a href="#1-8架构方法论图谱" class="headerlink" title="1.8架构方法论图谱"></a>1.8架构方法论图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.8%E6%9E%B6%E6%9E%84%E6%96%B9%E6%B3%95%E8%AE%BA%E5%9B%BE%E8%B0%B1.jpg" class="" title="1.8架构方法论图谱"><h1 id="1-9设计模式秘籍图谱"><a href="#1-9设计模式秘籍图谱" class="headerlink" title="1.9设计模式秘籍图谱"></a>1.9设计模式秘籍图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%A7%98%E7%B1%8D%E5%9B%BE%E8%B0%B1.jpg" class="" title="1.9设计模式秘籍图谱"><h1 id="2-1JVM垃圾回图谱-png"><a href="#2-1JVM垃圾回图谱-png" class="headerlink" title="2.1JVM垃圾回图谱.png"></a>2.1JVM垃圾回图谱.png</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/2.1JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E5%9B%BE%E8%B0%B1.png" class="" title="2.1JVM垃圾回图谱.png"><h1 id="2-2Java并发图谱"><a href="#2-2Java并发图谱" class="headerlink" title="2.2Java并发图谱"></a>2.2Java并发图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/2.2Java%E5%B9%B6%E5%8F%91%E5%9B%BE%E8%B0%B1.jpg" class="" title="2.2Java并发图谱"><h1 id="2-3Java集合图谱"><a href="#2-3Java集合图谱" class="headerlink" title="2.3Java集合图谱"></a>2.3Java集合图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/2.3Java%E9%9B%86%E5%90%88%E5%9B%BE%E8%B0%B1.jpg" class="" title="2.3Java集合图谱"><h1 id="2-4Java集合类图"><a href="#2-4Java集合类图" class="headerlink" title="2.4Java集合类图"></a>2.4Java集合类图</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/2.4Java%E9%9B%86%E5%90%88%E7%B1%BB%E5%9B%BE.jpg" class="" title="2.4Java集合类图"><h1 id="2-5Java-List类图"><a href="#2-5Java-List类图" class="headerlink" title="2.5Java List类图"></a>2.5Java List类图</h1><h1 id="2-6Java-Map类图"><a href="#2-6Java-Map类图" class="headerlink" title="2.6Java Map类图"></a>2.6Java Map类图</h1><h1 id="2-7Java-Set类图"><a href="#2-7Java-Set类图" class="headerlink" title="2.7Java Set类图"></a>2.7Java Set类图</h1><h1 id="3-1Hadoop技能图谱"><a href="#3-1Hadoop技能图谱" class="headerlink" title="3.1Hadoop技能图谱"></a>3.1Hadoop技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/3.1Hadoop%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="3.1Hadoop技能图谱"><h1 id="3-2大数据技能图谱"><a href="#3-2大数据技能图谱" class="headerlink" title="3.2大数据技能图谱"></a>3.2大数据技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/3.2%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="3.2大数据技能图谱"><h1 id="4-1云计算图谱"><a href="#4-1云计算图谱" class="headerlink" title="4.1云计算图谱"></a>4.1云计算图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/4.1%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9B%BE%E8%B0%B1.jpg" class="" title="4.1云计算图谱"><h1 id="4-2云计算技能图谱"><a href="#4-2云计算技能图谱" class="headerlink" title="4.2云计算技能图谱"></a>4.2云计算技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/4.2%E4%BA%91%E8%AE%A1%E7%AE%97%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="4.2云计算技能图谱"><h1 id="5-1IOS技能图谱"><a href="#5-1IOS技能图谱" class="headerlink" title="5.1IOS技能图谱"></a>5.1IOS技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.1IOS%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="5.1IOS技能图谱"><h1 id="5-2OpenResty技能图谱"><a href="#5-2OpenResty技能图谱" class="headerlink" title="5.2OpenResty技能图谱"></a>5.2OpenResty技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.2OpenResty%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="5.2OpenResty技能图谱"><h1 id="5-3前端技能图谱"><a href="#5-3前端技能图谱" class="headerlink" title="5.3前端技能图谱"></a>5.3前端技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.3%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="5.3前端技能图谱"><h1 id="5-4容器技能图谱"><a href="#5-4容器技能图谱" class="headerlink" title="5.4容器技能图谱"></a>5.4容器技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.4%E5%AE%B9%E5%99%A8%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="5.4容器技能图谱"><h1 id="5-5嵌入式开发技能图谱"><a href="#5-5嵌入式开发技能图谱" class="headerlink" title="5.5嵌入式开发技能图谱"></a>5.5嵌入式开发技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.5%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="5.5嵌入式开发技能图谱"><h1 id="5-6开发语言宝典"><a href="#5-6开发语言宝典" class="headerlink" title="5.6开发语言宝典"></a>5.6开发语言宝典</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.6%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80%E5%AE%9D%E5%85%B8.jpg" class="" title="5.6开发语言宝典"><h1 id="5-7移动端测试图谱"><a href="#5-7移动端测试图谱" class="headerlink" title="5.7移动端测试图谱"></a>5.7移动端测试图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.7%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%95%E5%9B%BE%E8%B0%B1.jpg" class="" title="5.7移动端测试图谱"><h1 id="5-8运维技能图谱"><a href="#5-8运维技能图谱" class="headerlink" title="5.8运维技能图谱"></a>5.8运维技能图谱</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.8%E8%BF%90%E7%BB%B4%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.jpg" class="" title="5.8运维技能图谱"><h1 id="5-9软件工程"><a href="#5-9软件工程" class="headerlink" title="5.9软件工程"></a>5.9软件工程</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.9%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.jpeg" class="" title="5.9软件工程"><h1 id="5-10DevOps"><a href="#5-10DevOps" class="headerlink" title="5.10DevOps"></a>5.10DevOps</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.10DevOps.jpg" class="" title="5.10DevOps"><h1 id="5-11前端开发"><a href="#5-11前端开发" class="headerlink" title="5.11前端开发"></a>5.11前端开发</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.11%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.jpg" class="" title="5.11前端开发"><h1 id="5-12后端开发"><a href="#5-12后端开发" class="headerlink" title="5.12后端开发"></a>5.12后端开发</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.12%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.jpg" class="" title="5.12后端开发"><h1 id="5-13软件发布流程"><a href="#5-13软件发布流程" class="headerlink" title="5.13软件发布流程"></a>5.13软件发布流程</h1><img src="/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/5.13%E8%BD%AF%E4%BB%B6%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B.jpeg" class="" title="5.13软件发布流程">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-1架构师图谱&quot;&gt;&lt;a href=&quot;#1-1架构师图谱&quot; class=&quot;headerlink&quot; title=&quot;1.1架构师图谱&quot;&gt;&lt;/a&gt;1.1架构师图谱&lt;/h1&gt;&lt;img src=&quot;/2018/03/20/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1/1.1%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9B%BE%E8%B0%B1.jpg&quot; class=&quot;&quot; title=&quot;1.1架构师图谱&quot;&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://kennethfan.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>redis对象</title>
    <link href="http://kennethfan.github.io/2017/11/21/redis-object/"/>
    <id>http://kennethfan.github.io/2017/11/21/redis-object/</id>
    <published>2017-11-21T15:03:42.000Z</published>
    <updated>2017-11-22T11:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面的章节，介绍了Redis泳道的主要数据结构，比如简单动态字符串，双端列表，字典，压缩列表，整数集合等等。Redis并没有直接使用这些数据结构来实现键值对数据库，而是基于数据结构创建了一个对象系统，这个系统包含字符串对象，列表对象，哈希对象，集合对象和有序集合对象这五种类型的对象，每种对象都用到了至少一种前面说的数据结构。</p><h1 id="对象的类型和编码"><a href="#对象的类型和编码" class="headerlink" title="对象的类型和编码"></a>对象的类型和编码</h1><p>Redis使用对象来表示数据库中的键和值，每次当我们在Redis的数据库中新创建一个键值对时，我们至少会创建两个对象，一个对象用作键值对的键，另一个对象用作键值对的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型</span></span><br><span class="line">  <span class="type">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 编码</span></span><br><span class="line">  <span class="type">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 指向底层实现数据结构的指针</span></span><br><span class="line">  <span class="type">void</span> *ptr;</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><table><thead><tr><th>类型常量</th><th>对象的名称</th></tr></thead><tbody><tr><td>REDIS_STIRNG</td><td>字符串对象</td></tr><tr><td>REDIS_LIST</td><td>列表对象</td></tr><tr><td>REDIS_HASH</td><td>哈希对象</td></tr><tr><td>REDIS_SET</td><td>集合对象</td></tr><tr><td>REDIS_ZSET</td><td>有序集合对象</td></tr></tbody></table><h2 id="编码和底层实现"><a href="#编码和底层实现" class="headerlink" title="编码和底层实现"></a>编码和底层实现</h2><p>对象的prt指针指向对象的底层实现数据结构，而这些数据结构由对象的encoding属性决定。encoding属性记录了对象所使用的编码，也即是说这个对象使用了什么数据结构作为对象的底层实现。</p><table><thead><tr><th>编码常量</th><th>编码所对应的底层数据结构</th></tr></thead><tbody><tr><td>REDIS_ENCODING_INT</td><td>long类型的整数</td></tr><tr><td>REDIS_ENCODING_EMBSTR</td><td>embstr编码的简单动态字符串</td></tr><tr><td>REDIS_ENCODING_RAW</td><td>简单动态字符串</td></tr><tr><td>REDIS_ENCODING_HT</td><td>字典</td></tr><tr><td>REDIS_ENCODING_LINKEDLIST</td><td>双端链表</td></tr><tr><td>DRDIS_ENCODING_ZIPLIST</td><td>压缩列表</td></tr><tr><td>REDIS_ENCODING_INTSET</td><td>整数集合</td></tr><tr><td>REDIS_ENCODING_SKIPLIST</td><td>跳跃表和字典</td></tr></tbody></table><p>每种类型的对象都至少使用了两种不同的编码。</p><table><thead><tr><th>类型</th><th>编码</th><th>对象</th></tr></thead><tbody><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_INT</td><td>使用整数值实现的字符串对象</td></tr><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_EMBSTR</td><td>使用embstr编码的简单动态字符串实现的字符串对象</td></tr><tr><td>REDIS_STRING</td><td>REDIS_ENCODING_RAW</td><td>使用简单动态字符串实现的字符串对象</td></tr><tr><td>REDIS_LIST</td><td>REDIS_ENDOGING_ZIPLIST</td><td>使用压缩列表实现的列表对象</td></tr><tr><td>REDIS_LIST</td><td>REDIS_ENDOGING_LINKEDLIST</td><td>使用双端列表实现的列表对象</td></tr><tr><td>REDIS_HASH</td><td>REDIS_ENDOGING_ZIPLIST</td><td>使用压缩列表实现的哈希对象</td></tr><tr><td>REDIS_HASH</td><td>REDIS_ENDOGING_HT</td><td>使用字典实现的哈希对象</td></tr><tr><td>REDIS_SET</td><td>REDIS_ENDOGING_INTSET</td><td>使用整数集合实现的哈希对象</td></tr><tr><td>REDIS_SET</td><td>REDIS_ENDOGING_HT</td><td>使用字典集合实现的哈希对象</td></tr><tr><td>REDIS_ZSET</td><td>REDIS_ENDOGING_ZIPLIST</td><td>使用压缩列表实现的有序列表集合</td></tr><tr><td>REDIS_ZSET</td><td>REDIS_ENDOGING_SKIPLIST</td><td>使用跳跃表实现的有序集合</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面的章节，介绍了Redis泳道的主要数据结构，比如简单动态字符串，双端列表，字典，压缩列表，整数集合等等。Redis并没有直接使用这些数据结构来实现键值对数据库，而是基于数据结构创建了一个对象系统，这个系统包含字符串对象，列表对象，哈希对象，集合对象和有序集合对象这五种类</summary>
      
    
    
    
    
    <category term="redis" scheme="http://kennethfan.github.io/tags/redis/"/>
    
    <category term="cache" scheme="http://kennethfan.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>redis压缩列表</title>
    <link href="http://kennethfan.github.io/2017/11/12/redis-ziplist/"/>
    <id>http://kennethfan.github.io/2017/11/12/redis-ziplist/</id>
    <published>2017-11-12T14:25:56.000Z</published>
    <updated>2017-11-12T15:12:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>压缩列表(ziplist)是列表键和哈希键的底层实现之一。当一个列表键值包含少量列表项，并且每个列表项要么是小整数值，要么是长度比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现。</p><p>另外，当一个哈希键值包含少量键值对，并且每个键值对的键和值要么就是小整数值，要么就是长度比较短的字符串，那么redis就会使用压缩列表来做哈希键的底层实现。</p><span id="more"></span><h1 id="压缩列表的构成"><a href="#压缩列表的构成" class="headerlink" title="压缩列表的构成"></a>压缩列表的构成</h1><p>压缩列表是Redis为了节约内存而开发的，是由一系列编码的连续内存块组成的顺序列(sequential)数据结构。一个压缩列表可以包含任意多个节点(entry)，每个节点可以保存一个字节数组或者一个整数值。</p><table><thead><tr><th>zlbytes</th><th>zltail</th><th>zllen</th><th align="left">entry1</th><th>entry2</th><th>…</th><th>entryN</th><th>zlend</th></tr></thead></table><table><thead><tr><th>属性</th><th>类型</th><th>长度</th><th>用途</th></tr></thead><tbody><tr><td>zlbytes</td><td>uint32_t</td><td>4字节</td><td>记录整个压缩列表占用的内存字节数：在对压缩列表进行内存重新分配，或者计算zlend的位置时使用</td></tr><tr><td>zltail</td><td>uint32_t</td><td>4字节</td><td>记录压缩列表表尾节点距离压缩列表的起始地址有多少字节：通过这个偏移量，程序无需遍历整个压缩列表就可以确定表尾节点的地址</td></tr><tr><td>zllen</td><td>uint16_t</td><td>2字节</td><td>记录了压缩列表包含的节点数量：当这个值小于UNIT16_MAX(65525)时，这个属性的值就是压缩列表包含的节点数量；当这个值等于UNIT16_MAX时，节点的真实数量需要遍历整个压缩列表才能计算得出</td></tr><tr><td>entryX</td><td>列表节点</td><td>不定</td><td>压缩列表包含的各个节点，节点的长度有节点保存的内容决定</td></tr><tr><td>zlend</td><td>unit8_t</td><td>1字节</td><td>特殊值0xFF，用于标记压缩列表的末端</td></tr></tbody></table><h1 id="压缩列表节点构成"><a href="#压缩列表节点构成" class="headerlink" title="压缩列表节点构成"></a>压缩列表节点构成</h1><p>每个压缩列表节点可以保存一个字节数组或者一个整数值，其中字节数组可以是一下三种长度的一种：</p><ul><li>长度小于等于63(2^6 - 1)字节的数组；</li><li>长度小于等于16383(2^14 - 1)字节的数组；</li><li>长度小于等于4294967295(2^32 - 1)字节的数组；</li></ul><p>而整数值可以是以下六种长度的一种</p><ul><li>4位长，介于0到12之间的无符号整数；</li><li>1字节长的有符号整数；</li><li>3字节长的有符号整数；</li><li>int16_t 类型整数；</li><li>int32_t 类型整数；</li><li>int64_t 类型整数；</li></ul><table><thead><tr><th>previous_entry_length</th><th>encoding</th><th>content</th></tr></thead></table><h2 id="previous-entry-length"><a href="#previous-entry-length" class="headerlink" title="previous_entry_length"></a>previous_entry_length</h2><p>节点的previous_entry_length属性以字节为单位，记录了压缩列表中前一个节点的长度。previous_entry_length属性的长度可以是1字节或者5字节：</p><ul><li>如果前一节点的长度小于254字节，那么previous_entry_length属性的长度为1字节：前一节点的长度就保存在这一字节里面。</li><li>如果前一节点的长度大于等于254字节，那么previous_entry_length属性的长度为5字节：其中第一字节设置成0xFE(254)，而之后的4个字节则用于保存前一节点的长度。</li></ul><p>因为节点的previous_entry_length属性记录了前一个节点的长度，所以程序可以通过指针运算，根据当前节点的起始地址计算出前一个节点的起始地址。</p><h2 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h2><p>节点的encoding属性记录了节点的content属性所保存数据的类型及长度：</p><ul><li>1字节、2字节或者5字节长，值的最高位位00、01、或者10的字节数组编码：这种编码表示节点的content属性保存着字节数组，数组的长度由编码除去最高两位之后的其他位记录</li><li>1字节长，值的最高位以11开头的整数编码：这种编码表示节点的content属性保存着整数值，整数值的类型和长度由除去最高两位之后的其他位记录</li></ul><p>字节数组编码</p><table><thead><tr><th>编码</th><th>编码长度</th><th>content保存的值</th></tr></thead><tbody><tr><td>00bbbbbb</td><td>1字节</td><td>长度小于等于63字节的字节数组</td></tr><tr><td>01bbbbbb xxxxxxxx</td><td>2字节</td><td>长度小于等于16383字节的字节数组</td></tr><tr><td>10bbbbbb xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx</td><td>5字节</td><td>长度小于等于494967295字节的字节数组</td></tr></tbody></table><p>整数编码</p><table><thead><tr><th>编码</th><th>编码长度</th><th>content保存的值</th></tr></thead><tbody><tr><td>11000000</td><td>1字节</td><td>int16_t类型的整数</td></tr><tr><td>11010000</td><td>1字节</td><td>int32_t类型的整数</td></tr><tr><td>11100000</td><td>1字节</td><td>int64_t类型的整数</td></tr><tr><td>11110000</td><td>1字节</td><td>24位有符号整数</td></tr><tr><td>11111110</td><td>1字节</td><td>8位有符号整数</td></tr><tr><td>1111xxxx</td><td>1字节</td><td>使用这一编码的节点没有相应的content属性，因为编码本身的xxxx四个位赢保存了一个介于0个12之间的值，所以无需content属性</td></tr></tbody></table><h2 id="content"><a href="#content" class="headerlink" title="content"></a>content</h2><p>节点的content属性负责保存节点的值，节点的值可以是一个字节数组或者整数，值的类型和长度由encoding属性决定。</p><h1 id="连锁更新"><a href="#连锁更新" class="headerlink" title="连锁更新"></a>连锁更新</h1><p>因为previous_entry_length长度变化引发的后续节点都需要更新并重新分配内存。</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li>ziplistNew：创建一个新的压缩列表，O(1)</li><li>ziplistPush：创建一个包含给定值的新节点，并将这个新节点添加到压缩列表的表头或者表尾，平均O(N)，最坏O(N^2)</li><li>ziplistInsert：将包含给定值的新节点插入到给定节点之后，平均O(N)，最坏O(N^2)</li><li>ziplistIndex：返回压缩列表给定索引上的节点，O(N)</li><li>ziplistFind：在压缩列表中查找并返回包含了给定值的节点，因为节点的值可能是一个字节数组，所以检查节点值和给定值是否相同的复杂度为O(N)，而查找整个列表的复杂度为O(N^2)</li><li>ziplistNext：返回给定节点的下一个节点，O(1)</li><li>ziplistPrev：返回给定节点的前一个节点，O(1)</li><li>ziplistGet：获取给定节点保存的值，O(1)</li><li>ziplistDelete：从列表中删除给定的节点，平均O(N)，最坏O(N^2)</li><li>ziplistDeleteRange：删除压缩列表在给定索引上的连续多个节点，平均O(N)，最坏O(N^2)</li><li>zpilistBlobLen：返回压缩列表目前占用的内存数，O(1)</li><li>zplistLen：返回压缩列表目前包含的节点数量，节点数量小于65535时为O(1)，大于65535时为O(N)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;压缩列表(ziplist)是列表键和哈希键的底层实现之一。当一个列表键值包含少量列表项，并且每个列表项要么是小整数值，要么是长度比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现。&lt;/p&gt;
&lt;p&gt;另外，当一个哈希键值包含少量键值对，并且每个键值对的键和值要么就是小整数值，要么就是长度比较短的字符串，那么redis就会使用压缩列表来做哈希键的底层实现。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://kennethfan.github.io/tags/redis/"/>
    
    <category term="cache" scheme="http://kennethfan.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>redis整数集合</title>
    <link href="http://kennethfan.github.io/2017/11/09/redis-intset/"/>
    <id>http://kennethfan.github.io/2017/11/09/redis-intset/</id>
    <published>2017-11-09T12:35:47.000Z</published>
    <updated>2017-11-09T12:59:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>整数集合(intset)是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。</p><span id="more"></span><h1 id="整数集合的实现"><a href="#整数集合的实现" class="headerlink" title="整数集合的实现"></a>整数集合的实现</h1><p>整数集合(intset)是Redis用于保存整数值的集合抽象数据结构，它可以保存类型为int16_t、int32_t或者int64_t的整数值，并且保证集合中不会出现重复元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line"><span class="comment">// 编码方式</span></span><br><span class="line">  <span class="type">uint32_t</span> encoding;</span><br><span class="line">  <span class="comment">// 集合包含的元素数量</span></span><br><span class="line">  <span class="type">uint32_t</span> length;</span><br><span class="line">  <span class="comment">// 保存元素的数组</span></span><br><span class="line">  <span class="type">int8_t</span> contents[];</span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p>contents数组是整数集合的底层实现：整数集合的每个元素都是contents数组的一个数组项(item)，各个项在数组中按值的大小从小到大有序地排列，并且数组中不包含任何重复项。</p><p>length属性记录了整个集合包含的元素数量，也即是contents数组的长度。</p><p>虽然intset 结构将contents申明为int8_t类型的数组，但实际上contents数组并不保存任何int8_t类型的值，contents数组的真正类型取决于encoding属性的值。</p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比整数集合现有的所有元素类型都要长时，整数集合需要先进行升级(upgrade)，然后才能将新元素添加到集合里面。升级整数集合并添加新元素共分为三步进行：</p><ol><li>根据新元素的类型，扩展整数集合底层数组的空间大小。</li><li>将底层数组现有的所有元素都转换成语新元素相同的类型，并将类型转换后的元素放置到正确的位置上，而且放置的过程中，需要继续维持底层数组的有序性质不变。</li><li>将新元素添加到底层素组里面。</li></ol><p>升级之后新元素的摆放位置：因为引发升级的新元素的长度总是比整数集合现有的所有元素的长度都大，所以新元素的值要么大于所有现有元素，要么小于所有现有元素。</p><ul><li>在新元素小于所有元素的情况下，新元素会被放置在底层数组的最开头。</li><li>在新元素大于所有现有元素的情况下，新元素会被放置在底层数组的最末尾。</li></ul><h2 id="升级的好处"><a href="#升级的好处" class="headerlink" title="升级的好处"></a>升级的好处</h2><h3 id="提升灵活性"><a href="#提升灵活性" class="headerlink" title="提升灵活性"></a>提升灵活性</h3><p>因为C语言是静态类型语言，为了避免升级，我们通常不会将两种不同类型的值放在同一个数据结构里面。但是因为整数集合可以通过自动升级底层数组来适应新元素，所以我们可以随意的将int16_t、int32_t或者int64_t类型的整数添加到集合中，而不必担心出现类型错误，这种做法非常灵活。</p><h3 id="节约内存"><a href="#节约内存" class="headerlink" title="节约内存"></a>节约内存</h3><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>整数集合不支持降级操作，一旦对数组进行了升级，编码会一直保持升级后的状态。</p><h1 id="整数集合API"><a href="#整数集合API" class="headerlink" title="整数集合API"></a>整数集合API</h1><ul><li>intsetNew：创建一个新的整数集合，O(1)</li><li>intsetAdd：将给定元素添加到整数集合里面，O(N)</li><li>intsetRemove：从整数集合中移除给定元素，O(N)</li><li>intsetFind：检查给定值是否存在于集合，O(logN)</li><li>intsetRandom：从整数集合中随机返回一个元素，O(1)</li><li>intsetGet：去除底层数组在索引上的元素，O(1)</li><li>intsetLen：返回整数集合中包含的元素个数，O(1)</li><li>intsetBlobLen：返回整数集合占用的内存字节数，O(1)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;整数集合(intset)是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://kennethfan.github.io/tags/redis/"/>
    
    <category term="cache" scheme="http://kennethfan.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>redis跳跃表</title>
    <link href="http://kennethfan.github.io/2017/11/09/redis-skiplist/"/>
    <id>http://kennethfan.github.io/2017/11/09/redis-skiplist/</id>
    <published>2017-11-09T11:47:07.000Z</published>
    <updated>2017-11-09T12:34:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>跳跃表(skiplist)是一种有序数据结构，他通过在每个节点维持多个指向其他节点的指针，从来打到快速访问节点的目的。</p><p>跳跃表支持平均O(logN)、最坏O(N)复杂度的节点查找，还可以通过顺序性操作来批量处理节点。</p><p>在大部分情况下，跳跃表的效率可以和平衡树媲美，并且因为跳跃表的实现比平衡树更为简单，所以有不少程序都使用跳跃表来代替平衡树。</p><p>Redis使用跳跃表作为有序结合键的底层实现之一，如果一个有序集合包含的元素数量比较多，又或者有序集合中的成员(member)是比较长的字符串，Redis机会使用跳跃表来作为有序集合键的底层实现。和链表、字典等数据结构被广泛应用在Redis内部不同，Redis只在两个地方泳道了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。</p><span id="more"></span><h1 id="跳跃表的实现"><a href="#跳跃表的实现" class="headerlink" title="跳跃表的实现"></a>跳跃表的实现</h1><h2 id="跳跃表节点"><a href="#跳跃表节点" class="headerlink" title="跳跃表节点"></a>跳跃表节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line">    <span class="comment">// 层</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="comment">// 前进指针</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line">      <span class="comment">// 跨度</span></span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> span;</span><br><span class="line">    &#125; level[];</span><br><span class="line">  <span class="comment">// 后退指针</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line">  <span class="comment">// 分值</span></span><br><span class="line">  <span class="type">double</span> score;</span><br><span class="line">  <span class="comment">// 成员对象</span></span><br><span class="line">  robj *obj;</span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><h3 id="层"><a href="#层" class="headerlink" title="层"></a>层</h3><p>跳跃表节点的level数据可以包含多个元素，每个元素都包含一个指向其他节点的指针，程序可以通过这些层来加快访问其他节点的速度，一般来说，层的数量越多，访问其他节点的速度就越快。每次创建一个新跳跃表的时候，程序都根据幂次定律(power law，越大的数出现的概率越小)随机生成一个介于1和32之间的level数组的大小，这个大小就是层的高度。</p><h3 id="前进指针"><a href="#前进指针" class="headerlink" title="前进指针"></a>前进指针</h3><p>每个层都有一个指向表尾方向的前进指针(level[i].forward)属性，用于从表尾方向访问节点。</p><h3 id="跨度"><a href="#跨度" class="headerlink" title="跨度"></a>跨度</h3><p>层的跨度(level[i].span属性)用于记录两个节点之间的距离：</p><ul><li>两个节点之间的跨度越大，他们相距的就越远。</li><li>指向NULL的所有前进指针的跨度都为0，因为它们没有连向任何节点。</li></ul><h3 id="后退指针"><a href="#后退指针" class="headerlink" title="后退指针"></a>后退指针</h3><p>节点的后退指针(backward属性)用于从表尾指向表头方向访问节点：跟可以一次跳过多个节点的前进指针不同，因为每个节点只有一个后退指针，所以每次只能后退至前一个节点。</p><h3 id="分值和成员"><a href="#分值和成员" class="headerlink" title="分值和成员"></a>分值和成员</h3><p>节点的分值(score属性)是一个double类型的浮点数，跳跃表中的所有节点都按照分值从小到大来排序。</p><p>节点的成员对象(obj属性)是一个指针，它指向一个字符串对象，而字符串对象则保存着一个SDS值。</p><p>在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值却是可以相同的：分值相同的节点将按照成员对象在字典序中的大小来进行排序，成员对象教小的节点会排在前面(靠近表头的方向)。</p><h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><p>仅靠多个跳跃表节点就可以组成一个跳跃表，但是通过一个zskiplist结构来持有这些节点，程序可以更方便的对整个跳跃表进行处理，比如快速访问跳跃表的头结点和尾节点，或者快速地获取跳跃表节点的数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">    <span class="comment">// 头节点和尾节点</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line">  <span class="comment">// 表中层数最大的节点的层数</span></span><br><span class="line">  <span class="type">int</span> level;</span><br><span class="line">  <span class="comment">// 节点数量</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> length;</span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure><p>header和tail指针分别指向跳跃表的表头和表尾节点，通过这两个指针，程序定位表头和表尾节点的复杂度为O(1)。</p><p>通过使用length属性来记录节点的数量，程序可以在O(1)复杂度内返回跳跃表的长度。</p><p>level属性则用于在O(1)复杂度内获取跳跃表中层高最大的那个节点的层数量，注意表头节点的层高并不计算在内。</p><h1 id="跳跃表API"><a href="#跳跃表API" class="headerlink" title="跳跃表API"></a>跳跃表API</h1><ul><li>zslCreate：创建一个新的跳跃表，O(1)</li><li>zslFree：释放给定跳跃表，以及表中包含的所有节点，O(N)</li><li>zslInsert：将包含给定增员和分支的新节点添加到跳跃表中，平均O(logN)、最坏O(N)</li><li>zslDelete：删除跳跃表中包含给定成员和分值的节点，平均O(logN)、最坏O(N)</li><li>zslGetRank：返回包含给定成员和分支的节点在跳跃表中的排位，平均O(logN)、最坏O(N)</li><li>zslGetElementByRank：返回跳跃表在给定排位上的节点，平均O(logN)、最坏O(N)</li><li>zslIsInRange：给定一个分值范围，比如0到15，20到28，如果跳跃表中至少有一个节点的分支在这个范围内，那么返回1，否则返回0，平均O(logN)、最坏O(N)</li><li>zslFirstInRange：给定一个分支范围，返回跳跃表中第一个符合这个范围的节点，平均O(logN)、最坏O(N)</li><li>zslLastInRange：给定一个分支范围，返回跳跃表中最后一个符合这个范围的节点，平均O(logN)、最坏O(N)</li><li>zslDeleteRangeScore：给定一个分值范围，删除跳跃表中所有在这个范围之内的节点，O(N)</li><li>zslDeleteRangeByRank：得定一个排位范围，删除跳跃表中所有在这个范围内的节点，O(N)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;跳跃表(skiplist)是一种有序数据结构，他通过在每个节点维持多个指向其他节点的指针，从来打到快速访问节点的目的。&lt;/p&gt;
&lt;p&gt;跳跃表支持平均O(logN)、最坏O(N)复杂度的节点查找，还可以通过顺序性操作来批量处理节点。&lt;/p&gt;
&lt;p&gt;在大部分情况下，跳跃表的效率可以和平衡树媲美，并且因为跳跃表的实现比平衡树更为简单，所以有不少程序都使用跳跃表来代替平衡树。&lt;/p&gt;
&lt;p&gt;Redis使用跳跃表作为有序结合键的底层实现之一，如果一个有序集合包含的元素数量比较多，又或者有序集合中的成员(member)是比较长的字符串，Redis机会使用跳跃表来作为有序集合键的底层实现。和链表、字典等数据结构被广泛应用在Redis内部不同，Redis只在两个地方泳道了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://kennethfan.github.io/tags/redis/"/>
    
    <category term="cache" scheme="http://kennethfan.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>redis字典</title>
    <link href="http://kennethfan.github.io/2017/11/07/redis-dict/"/>
    <id>http://kennethfan.github.io/2017/11/07/redis-dict/</id>
    <published>2017-11-07T13:55:12.000Z</published>
    <updated>2017-11-07T14:50:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>字典，又称符号表(symbol table)、关联数组(associative array)或映射(map)，是一种保存键值对的抽象数据结构</p><p>在字典中，一个键(key)可以和一个值(value)进行关联，这些关联的键和值就称为键值对。</p><p>字典中的每个键都是独一无二的，程序可以在字典中根据键查找与之关联的值，或者通过键来更新值，又或者根据键来删除整个键值对。</p><h1 id="字典的实现"><a href="#字典的实现" class="headerlink" title="字典的实现"></a>字典的实现</h1><p>Redis字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。</p><span id="more"></span><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line"><span class="comment">// 哈希数组</span></span><br><span class="line">  dictEntry **table;</span><br><span class="line">  <span class="comment">// 哈希表大小</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">  <span class="comment">// 哈希表大小掩码，用于计算索引，总是等于size-1</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> sizemask;</span><br><span class="line">  <span class="comment">// 哈希表已有节点的数量</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><p>table属性是一个节点数组</p><h2 id="哈希表节点"><a href="#哈希表节点" class="headerlink" title="哈希表节点"></a>哈希表节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">  <span class="type">void</span> *key;</span><br><span class="line">  <span class="comment">// 值</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">      uint64 tu64;</span><br><span class="line">      int64 ts64;</span><br><span class="line">    &#125; v;</span><br><span class="line">  <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">  dictType *type;</span><br><span class="line">  <span class="comment">// 私有数据</span></span><br><span class="line">  <span class="type">void</span> *privdata;</span><br><span class="line">  <span class="comment">// 哈希表</span></span><br><span class="line">  dictht ht[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">// rehash索引，当rehash不在进行时，值为-1</span></span><br><span class="line">  <span class="type">int</span> rehashidx;</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line">    <span class="comment">// 计算哈希值的函数</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="title function_">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *key)</span>;</span><br><span class="line">  <span class="comment">// 复制键的函数</span></span><br><span class="line">  <span class="type">void</span>* (*keyDup)(<span class="type">void</span> *privData, <span class="type">const</span> <span class="type">void</span> *key);</span><br><span class="line">  <span class="comment">// 复制值的函数</span></span><br><span class="line">  <span class="type">void</span>* (*valDup)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *obj);</span><br><span class="line">  <span class="comment">// 对比键的函数</span></span><br><span class="line">  <span class="type">int</span> (*keyCompare)(<span class="type">void</span> *privdata, <span class="type">const</span> <span class="type">void</span> *key1, <span class="type">const</span> <span class="type">void</span>* key2);</span><br><span class="line">  <span class="comment">// 销毁键的函数</span></span><br><span class="line">  <span class="type">void</span> (*keyDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *key1);</span><br><span class="line">  <span class="comment">// 销毁值的函数</span></span><br><span class="line">  <span class="type">void</span> (*valDestructor)(<span class="type">void</span> *privdata, <span class="type">void</span> *obj);</span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure><p>ht属性是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，一般情况下只是用ht[0]哈希表，ht[1]哈希表只会对ht[0]进行rehash时使用。</p><p>除了ht[1]之外，另一个和rehash有关的属性就是rehashidx，它记录了rehash的目前进度，如果没有在进行rehash，那么它的值为-1。</p><h1 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h1><p>当要将一个新的键值对添加到字典里面时，程序需要先根据键值对的键计算出哈希值和索引值，然后根据索引值，将包含新键值对的哈希表节点放到哈希表数组的指定索引上面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字典设置的哈希函数，计算key的哈希值</span></span><br><span class="line">hash = dict-&gt;type-&gt;hashFunction(key);</span><br><span class="line"><span class="comment">// 使用哈希表的sizemask属性和哈希值，计算出索引</span></span><br><span class="line">根据情况不同，ht[x]可以是ht[<span class="number">0</span>]或ht[<span class="number">1</span>]</span><br><span class="line">index = hash &amp; dict-&gt;ht[x].sizemask</span><br></pre></td></tr></table></figure><p>当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis使用MurmurHash2算法来计算键的哈希值</p><p>MurmurHash算法最初有Austin Appleby于2008年发明，这种算法的有点在于，即使输入的键是有规律的，算法仍能给出一个很好的随机分布性，并且算法的计算速度也很快。</p><h1 id="阶段键冲突"><a href="#阶段键冲突" class="headerlink" title="阶段键冲突"></a>阶段键冲突</h1><p>当有两个或者以上的键被分配到了哈希表数组的同一个索引上面时，我们称这些键发生了冲突(collision)。</p><p>Redis的哈希表使用链地址法(separate chaining)来解决冲突，每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单链表，被分配到同一个索引上的多个节点可以用这个单向链表l连接起来，这就解决了键冲突的问题。</p><h1 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h1><p>随着操作的不断执行，哈希表保存的键值对会逐渐的增多或者减少，为了让哈希表d额负载因子(load factor)维持在一个合理的范围之内，当哈希表保存的j键值对数量太多或者太少时，程序需要对哈希表的大小进行相应的扩展或者收缩。</p><p>扩展或者搜索哈希表的工作可以通过执行rehash操作来完成，步骤如下</p><ol><li>为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量（ht[0].used属性的值）<ul><li>如果执行的是扩展操作，那么ht[1]的大小为第一个大于等于ht[0].used*2的的2^n</li><li>如果执行的是收缩操作，那么ht[1]的大小为第一个大于等于ht[0].used*2的2^n</li></ul></li><li>将保存在ht[0]的所有键值对rehash到ht[1]上；rehash值的是重新计算键的哈希值和索引值，然后将键值对放置到ht[1]的指定位置上</li><li>当ht[2]包含的所有键值对都迁移到ht[1]之后，释放ht[0]，将ht[1]设置成ht[0]，并为ht[1]新创建空哈希表，为下次rehash做准备</li></ol><h2 id="哈希表的扩展与收缩"><a href="#哈希表的扩展与收缩" class="headerlink" title="哈希表的扩展与收缩"></a>哈希表的扩展与收缩</h2><p>当以下条件中的任意一个呗满足是，程序会自动对哈希表执行扩展操作</p><ol><li>服务器目前没有正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于1。</li><li>服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。</li></ol><p>负载因子计算公式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_factor = ht[<span class="number">0</span>].used / ht[<span class="number">0</span>].size</span><br></pre></td></tr></table></figure><p>另一方面，当哈希表的负载因子小于0.1时，程序自动开始对哈希表执行收缩操作。</p><h1 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h1><p>上一节说过，扩展或收缩哈希表需要将ht[0]里面的所有键值对rehash到ht[1]里面，但是，这个rehash动作并不是一次性、集中式地完成的，而是分多次、渐进式地完成的。</p><p>渐进式rehash的步骤</p><ol><li>为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个hash表。</li><li>更新rehashidx的值为0，表示rehash正式开始。</li><li>rehash期间，每次对字典执行添加、删除、查找或者更新时，程序处理执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成之后，程序将rehashidx加1。</li><li>随着字典操作的不断执行，最终在某一时刻，ht[0]的所有键值对都会被rehash到ht[1]上，这时更新rehashidx的值为-1。</li></ol><h1 id="字典API"><a href="#字典API" class="headerlink" title="字典API"></a>字典API</h1><ul><li>dictCreate：创建一个新的字典，0(1)</li><li>dictAdd：将给定的键值对添加到字典里面，O(1)</li><li>dictReplace：将给定的键值对添加到字典里面，如果键已经存在则覆盖，O(1)</li><li>dictFetchValue：返回给定键的值，O(1)</li><li>dictGetRandomKey：从字典中随机返回一个键值对，O(1)</li><li>dictDelete：从字典中删除给定键所对应的键值对，O(1)</li><li>dictRelease：释放给定字典，以及字典中包含的所有键值对，O(N)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;字典，又称符号表(symbol table)、关联数组(associative array)或映射(map)，是一种保存键值对的抽象数据结构&lt;/p&gt;
&lt;p&gt;在字典中，一个键(key)可以和一个值(value)进行关联，这些关联的键和值就称为键值对。&lt;/p&gt;
&lt;p&gt;字典中的每个键都是独一无二的，程序可以在字典中根据键查找与之关联的值，或者通过键来更新值，又或者根据键来删除整个键值对。&lt;/p&gt;
&lt;h1 id=&quot;字典的实现&quot;&gt;&lt;a href=&quot;#字典的实现&quot; class=&quot;headerlink&quot; title=&quot;字典的实现&quot;&gt;&lt;/a&gt;字典的实现&lt;/h1&gt;&lt;p&gt;Redis字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://kennethfan.github.io/tags/redis/"/>
    
    <category term="cache" scheme="http://kennethfan.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>指针函数&amp;函数指针</title>
    <link href="http://kennethfan.github.io/2017/11/07/c-point-method/"/>
    <id>http://kennethfan.github.io/2017/11/07/c-point-method/</id>
    <published>2017-11-07T13:01:58.000Z</published>
    <updated>2017-11-07T13:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在看redis原理的时候，看到链表结构中，用到了函数指针，想起了之前容易弄混的指针函数和函数指针，所以记录一下</p><h1 id="函数指针和指针函数的区别"><a href="#函数指针和指针函数的区别" class="headerlink" title="函数指针和指针函数的区别"></a>函数指针和指针函数的区别</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>函数指针是指向函数地址的指针，本质是一个指针</li><li>指针函数是返回类型是指针的函数，本质上是函数</li></ul><h2 id="如何区分"><a href="#如何区分" class="headerlink" title="如何区分"></a>如何区分</h2><p>看星号是否被括号包含：被括号包含是函数指针，反之是指针函数。</p><span id="more"></span><h3 id="函数指针示例"><a href="#函数指针示例" class="headerlink" title="函数指针示例"></a>函数指针示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 申明一个函数，做加法操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申明一个函数，做乘法操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 申明一个函数指针，参数两个int，返回int</span></span><br><span class="line">    <span class="type">int</span> (*method_point) (<span class="type">int</span> a, <span class="type">int</span> b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值给加法函数</span></span><br><span class="line">    method_point = &amp;sum;</span><br><span class="line">    <span class="comment">// 打印函数地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, method_point);</span><br><span class="line">    <span class="comment">// 打印执行结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, method_point(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值给乘法函数</span></span><br><span class="line">    method_point = &amp;mul;</span><br><span class="line">    <span class="comment">// 打印函数地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, method_point);</span><br><span class="line">    <span class="comment">// 打印执行结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, method_point(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x102256eb0</span><br><span class="line">8</span><br><span class="line">0x102256ed0</span><br><span class="line">15</span><br></pre></td></tr></table></figure><h3 id="指针函数示例"><a href="#指针函数示例" class="headerlink" title="指针函数示例"></a>指针函数示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 定义一个函数，返回int指针类型</span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> c = a + b;</span><br><span class="line">    <span class="keyword">return</span> &amp;c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 申明一个变量，赋值函数返回结果</span></span><br><span class="line">    <span class="type">int</span>* c = sum(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *c);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在看redis原理的时候，看到链表结构中，用到了函数指针，想起了之前容易弄混的指针函数和函数指针，所以记录一下&lt;/p&gt;
&lt;h1 id=&quot;函数指针和指针函数的区别&quot;&gt;&lt;a href=&quot;#函数指针和指针函数的区别&quot; class=&quot;headerlink&quot; title=&quot;函数指针和指针函数的区别&quot;&gt;&lt;/a&gt;函数指针和指针函数的区别&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数指针是指向函数地址的指针，本质是一个指针&lt;/li&gt;
&lt;li&gt;指针函数是返回类型是指针的函数，本质上是函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何区分&quot;&gt;&lt;a href=&quot;#如何区分&quot; class=&quot;headerlink&quot; title=&quot;如何区分&quot;&gt;&lt;/a&gt;如何区分&lt;/h2&gt;&lt;p&gt;看星号是否被括号包含：被括号包含是函数指针，反之是指针函数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="c" scheme="http://kennethfan.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>redis链表</title>
    <link href="http://kennethfan.github.io/2017/11/06/redis-linkedlist/"/>
    <id>http://kennethfan.github.io/2017/11/06/redis-linkedlist/</id>
    <published>2017-11-06T15:41:15.000Z</published>
    <updated>2017-11-07T14:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每个链表和链表节点的实现"><a href="#每个链表和链表节点的实现" class="headerlink" title="每个链表和链表节点的实现"></a>每个链表和链表节点的实现</h1><h2 id="链表节点结构"><a href="#链表节点结构" class="headerlink" title="链表节点结构"></a>链表节点结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="comment">// 后置节点</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">// 节点内容</span></span><br><span class="line">    <span class="type">void</span> *value;</span><br><span class="line">&#125; listNode;</span><br></pre></td></tr></table></figure><h2 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="comment">// 头节点</span></span><br><span class="line">    listNode *head;</span><br><span class="line">    <span class="comment">// 尾节点</span></span><br><span class="line">    listNode *tail;</span><br><span class="line">    <span class="comment">// 节点数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len;</span><br><span class="line">    <span class="comment">// 节点复制函数</span></span><br><span class="line">    <span class="type">void</span>* (*dup) (<span class="type">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点释放函数</span></span><br><span class="line">    <span class="type">void</span> (*<span class="built_in">free</span>) (<span class="type">void</span> *ptr);</span><br><span class="line">    <span class="comment">// 节点对比函数</span></span><br><span class="line">    <span class="type">int</span> (*match) (<span class="type">void</span> *prt, <span class="type">void</span> *key);</span><br><span class="line">&#125; <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><p>dup、free、match成员用于实现多态链表所需的类型特定函数：</p><ul><li>dup函数用于复制链表节点所保存的值。</li><li>free函数用于释放节点所保存的值。</li><li>match函数用户对比链表节点所保存的值和另一个输入值是否相等。</li></ul><span id="more"></span><p>Redis的链表实现特性</p><ul><li>双端：链表节点带有prev和next指针，获取前置节点和后置节点的复杂度都是O(1)</li><li>无环：头结点的prev和尾节点的next都指向NULL</li><li>头节点和尾节点：获取表头和表尾复杂度都是O(1)</li><li>多态：链表节点都用void*保存节点值，并且可以通过list结构的dup、free、match三个属性为节点设置类型特定函数，所以链表可以保存不同类型的值。</li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li>listSetDupMethod：将给定的函数设置为链表的节点复制函数，O(1)</li><li>listGetDupMethod：返回链表正在使用的节点复制函数，O(1)</li><li>listSetFreeMethod：将给定的函数设置成链表节点的释放函数，O(1)</li><li>listGetFreeMethod：反馈链表正在使用的节点释放函数，O(1)</li><li>listSetMatchMethod：将给定的函数设置成链表节点的对比函数，O(1)</li><li>listGetMatchMethod：反馈链表正在使用的节点对比函数，O(1)</li><li>listLength：返回链表长度，O(1)</li><li>listFirst：返回链表头结点，O(1)</li><li>listLast：返回链表尾节点，O(1)</li><li>listPrevNode：返回前置节点，O(1)</li><li>listNextNode：返回后置节点，O(1)</li><li>listNodeValue：返回节点保存的值，O(1)</li><li>listCreate：创建一个空链表，O(1)</li><li>listAddNodeHead：添加节点到链表头，O(1)</li><li>listAddNodeTail：添加节点到链表尾，O(1)</li><li>listInsertNode：将新节点添加到给定节点之前或者之后，O(1)</li><li>listSearchKey：反会链表中包含给定值的节点，O(N)</li><li>listIndex：返回链表中给定索引的节点，O(N)</li><li>listDelNode：删除给定节点，O(N)</li><li>listRotate：弹出尾节点，并弹出，插入到表头，O(1)</li><li>listDup：复制一个给链表，O(N)</li><li>listRelease：释放给定链表以及链表中所有节点，O(N)</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;每个链表和链表节点的实现&quot;&gt;&lt;a href=&quot;#每个链表和链表节点的实现&quot; class=&quot;headerlink&quot; title=&quot;每个链表和链表节点的实现&quot;&gt;&lt;/a&gt;每个链表和链表节点的实现&lt;/h1&gt;&lt;h2 id=&quot;链表节点结构&quot;&gt;&lt;a href=&quot;#链表节点结构&quot; class=&quot;headerlink&quot; title=&quot;链表节点结构&quot;&gt;&lt;/a&gt;链表节点结构&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 前置节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listNode&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;prev&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 后置节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listNode&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; listNode;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;链表结构&quot;&gt;&lt;a href=&quot;#链表结构&quot; class=&quot;headerlink&quot; title=&quot;链表结构&quot;&gt;&lt;/a&gt;链表结构&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;list&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 头节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listNode *head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 尾节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listNode *tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点复制函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;* (*dup) (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点释放函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; (*&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 节点对比函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; (*match) (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *prt, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;dup、free、match成员用于实现多态链表所需的类型特定函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dup函数用于复制链表节点所保存的值。&lt;/li&gt;
&lt;li&gt;free函数用于释放节点所保存的值。&lt;/li&gt;
&lt;li&gt;match函数用户对比链表节点所保存的值和另一个输入值是否相等。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://kennethfan.github.io/tags/redis/"/>
    
    <category term="cache" scheme="http://kennethfan.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>redis字符串</title>
    <link href="http://kennethfan.github.io/2017/11/06/redis-string/"/>
    <id>http://kennethfan.github.io/2017/11/06/redis-string/</id>
    <published>2017-11-06T15:00:11.000Z</published>
    <updated>2017-11-07T13:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis没有直接使用C语言传统的字符串表示（以空字符串结尾的字符数组），而是自己构建了一种名为动态字符串（simple dynamic string，SDS）的抽象类型，并将SDS用作Redis的默认字符串表示。Redis的数据库里面，包含字符串值的键值对在底层都是用SDS实现的；除此之外，SDS还被用作缓冲区（buffer）：AOF模块中的AOF缓冲区，以及客户端状态中的输入缓冲区，都是有SDS实现的。</p><span id="more"></span><h1 id="SDS的定义"><a href="#SDS的定义" class="headerlink" title="SDS的定义"></a>SDS的定义</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="comment">// 记录buf数组中已使用字节的数量</span></span><br><span class="line">    <span class="comment">// 等于SDS保存的字符串长度</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// 记录buf数组中未使用字节的数量</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="comment">// 字节数组</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>SDS遵循C字符串一空字符串结尾的惯例，保存空字符的1字节空间不计算在SDS的len属性里面，并且为空字符分配额外的1字节，以及添加空字符到字符串末尾等操作都是由SDS函数自动完成。遵循空字符结尾这一惯例的好处是，SDS可以直接使用一部分C字符串函数库里的函数。</p><h1 id="SDS与C字符串的区别"><a href="#SDS与C字符串的区别" class="headerlink" title="SDS与C字符串的区别"></a>SDS与C字符串的区别</h1><h2 id="常数复杂度获取字符串长度"><a href="#常数复杂度获取字符串长度" class="headerlink" title="常数复杂度获取字符串长度"></a>常数复杂度获取字符串长度</h2><p>C字符串不记录自身的长度信息，所以为了获取一个C字符串的长度，必须遍历整个字符串，复杂度O（N).</p><p>和C字符串不同，SDS在len属性中记录了SDS本身的长度，获取长度复杂度仅为O（1）。</p><h2 id="杜绝缓冲区溢出"><a href="#杜绝缓冲区溢出" class="headerlink" title="杜绝缓冲区溢出"></a>杜绝缓冲区溢出</h2><p>除了获取长度的负责度高之外，C字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br></pre></td></tr></table></figure><p>因为不记录自身长度，所以strcat假定执行这个函数时，已经为desc分配了足够多的内存，可以容纳src的所有内容，而一旦这个假设不成立，就会产生缓冲区溢出。</p><p>与C字符串不同，SDS的空间分配策略完全杜绝了发生缓冲区溢出的可能性：当SDS API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改要求，如果不满足，API自动将SDS的空间扩展至所需大小，然后才执行实际的修改操作。所以SDS不会造成缓冲区溢出。</p><h2 id="减少修改字符串时带来的内存重分配次数"><a href="#减少修改字符串时带来的内存重分配次数" class="headerlink" title="减少修改字符串时带来的内存重分配次数"></a>减少修改字符串时带来的内存重分配次数</h2><p>因为C字符串不记录自身长度，对一个包含了N个字符的C字符串来说，字符串底层总是一个N+1字节数组。因为C字符串的长度和底层的数组长度自检存在某种关联关系，所以每次增长一个或者缩短一个C字符串，总要对保存这个C字符串的数组进行一次内存重分配操作：</p><ul><li>如果是增长操作，需要先通过内存重分类扩展底层数组的空间大小，如果忘记了就会产生缓冲区溢出操作。</li><li>如果是缩短操作，需要重新分配来释放不再使用的空间，如果忘了会产生内存泄露。</li></ul><p>为了必满C字符串的缺陷，SDS通过未使用空间接触了字符串长度和底层数组长度的关联；通过未使用空间，SDS实现了空间预分配和惰性空间释放两种优化策略</p><h3 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h3><p>当SDS的API对一个SDS进行修改，并且需要对SDS进行空间扩展的时候，程序不仅会分配修改所必须要的空间，还会为SDS分配额外的未使用空间。</p><ul><li>如果修改之后，SDS的长度（len）小于1MB，程序分配和len同样大小的未使用空间。</li><li>如果修改之后，SDS的长度大于等于1MB，程序会分配1MB未使用空间。</li></ul><h3 id="惰性空间释放"><a href="#惰性空间释放" class="headerlink" title="惰性空间释放"></a>惰性空间释放</h3><p>惰性空间释放用于优化SDS的字符串缩短操作：当SDS的API需要缩短SDS保存的字符串时，程序并不立即重新分配释放多出来的字节，而是使用free将这些字节数量记录起来，并等待将来使用。</p><h2 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h2><p>字符串中包含空字符串\0时，C字符串会有问题，SDS不会，因为SDS通过len记录了字符串的长度。</p><h2 id="兼容部分C字符串函数"><a href="#兼容部分C字符串函数" class="headerlink" title="兼容部分C字符串函数"></a>兼容部分C字符串函数</h2><h2 id="SDS-API"><a href="#SDS-API" class="headerlink" title="SDS API"></a>SDS API</h2><ul><li>sdsnew：创建一个包含给定C字符串的SDS，O(N)</li><li>sdsempy：创建一个空SDS，O(1)</li><li>sdsfree：释放SDS，O(1)</li><li>sdslen：返回已使用空间字节数，O(1)</li><li>sdsavail：返回未使用空间字节数，O(1)</li><li>sdsdup：创建SDS副本，O(N)</li><li>sdsclear：清空SDS内容，O(1)</li><li>sdscat：拼接给定C字符串，O(N)</li><li>sdscatsds：拼接给定SDS，O(N)</li><li>sdscpy：将给定C字符串复制到SDS，覆盖原有内容，O(N)</li><li>sdsgrowzero：用空串扩展SDS到指定长度，O(N)</li><li>sdsrange：保留给定区间内容，不在区间内被覆盖，O(N)</li><li>sdstrim：移除SDS中给定C字符串中出现过的字符，O(N^2)</li><li>sdscmp：比较两个SDS是否相同，O(N)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis没有直接使用C语言传统的字符串表示（以空字符串结尾的字符数组），而是自己构建了一种名为动态字符串（simple dynamic string，SDS）的抽象类型，并将SDS用作Redis的默认字符串表示。Redis的数据库里面，包含字符串值的键值对在底层都是用SDS实现的；除此之外，SDS还被用作缓冲区（buffer）：AOF模块中的AOF缓冲区，以及客户端状态中的输入缓冲区，都是有SDS实现的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://kennethfan.github.io/tags/redis/"/>
    
    <category term="cache" scheme="http://kennethfan.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>zsh-字符串通配符</title>
    <link href="http://kennethfan.github.io/2017/09/21/zsh-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    <id>http://kennethfan.github.io/2017/09/21/zsh-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%9A%E9%85%8D%E7%AC%A6/</id>
    <published>2017-09-20T16:03:35.000Z</published>
    <updated>2017-09-20T16:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>通配符（glob）是 shell 中的一个比较重要的概念，可以认为是正则表达式的简化版本。通配符在字符串匹配和文件名搜索等方面非常有用。本篇只讲它在字符串匹配上的用法</p><h1 id="通配符的基本用法"><a href="#通配符的基本用法" class="headerlink" title="通配符的基本用法"></a>通配符的基本用法</h1><p>之前在讲字符串匹配判断时，通配符出现过，就是 <code>*&quot;$str&quot;*</code> 两边的星号。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% str1=abcd</span><br><span class="line">% str2=bc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 星号要在引号外边</span></span><br><span class="line">% [[ <span class="variable">$str1</span> == *<span class="string">&quot;<span class="variable">$str2</span>&quot;</span>* ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意带通配符的字符串必须放在右边</span></span><br><span class="line">% [[ *<span class="string">&quot;<span class="variable">$str2</span>&quot;</span>* == <span class="variable">$str1</span> ]] &amp;&amp; <span class="built_in">echo</span> good</span><br></pre></td></tr></table></figure><span id="more"></span><p>星号是最常用的通配符，用于匹配任意数量（包括 0 个）的任意字符。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 问号用于匹配一个任意字符</span></span><br><span class="line">% [[ abcd == ab?? ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中括号用于匹配出现在其中的单个字符</span></span><br><span class="line">% [[ abcd == abc[bcd] ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果中括号里第一个字符是 ^，则匹配除了除了中括号里的单个字符</span></span><br><span class="line">% [[ abcd == abc[^de] ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">% [[ abcd == abc[^ce] ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中括号里可以指定字符的范围</span></span><br><span class="line">% [[ a4 == [a-b][2-5] ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以指定多个字符范围，并且可以掺杂其他字符</span></span><br><span class="line">% [[ B4 == [a-cdddA-B][2-5] ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尖括号用于匹配一定范围的单个整数</span></span><br><span class="line">% [[ 123 == 12&lt;3-4&gt; ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以匹配整个整数</span></span><br><span class="line">% [[ 123 == &lt;100-200&gt; ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以没有上下界，默认的下界是 0，上界是正无穷</span></span><br><span class="line">% [[ 123 == &lt;100-&gt; &amp;&amp; 123 == &lt;-200&gt; ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以上下界都没有，那么会匹配任意正整数和 0</span></span><br><span class="line"><span class="comment"># 这个可以用来判断字符串是否构成整数</span></span><br><span class="line"><span class="comment"># [[ 123 == &lt;-&gt; ]] &amp;&amp; echo good</span></span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># ( 1 | 2 | ... ) 用于同时判断多个条件，满足一个即可</span></span><br><span class="line">%  [[ ab == (aa|ab) ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果中括号里要用 - 或者 ^，放在最后即可，不需要转义</span></span><br><span class="line">% [[ -^3 == [a-c-][3^-][3^-] ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上是通配符的基本用法，总结一下。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>通配符</td><td>含义</td><td></td></tr><tr><td>*</td><td>任意数量的任意字符</td><td></td></tr><tr><td>?</td><td>任意一个字符</td><td></td></tr><tr><td>[abcd]</td><td>abcd 中的任意一个字符</td><td></td></tr><tr><td>[^abcd]</td><td>除 abcd 外的任意一个字符</td><td></td></tr><tr><td>[a-c]</td><td>a 和 c 之间的一个字符</td><td></td></tr><tr><td>[a-cB-Dxyz]</td><td>a 和 c 之间、B 和 D 之间以及 xyz 中的一个字符</td><td></td></tr><tr><td>&lt;1-100&gt;</td><td>1 和 100 之间的整数</td><td></td></tr><tr><td>&lt;-50&gt;</td><td>0 和 50 之间的整数</td><td></td></tr><tr><td>&lt;100-&gt;</td><td>大于 100 的整数</td><td></td></tr><tr><td>&lt;-&gt;</td><td>任意正整数和 0</td><td></td></tr><tr><td>([a-c]|&lt;1-100&gt;)</td><td>a 和 c 之间的一个字符或者 1 和 100 之间的整数</td><td></td></tr></tbody></table><h1 id="加强版通配符"><a href="#加强版通配符" class="headerlink" title="加强版通配符"></a>加强版通配符</h1><p>Zsh 还支持加强版通配符，功能更多一些。如果使用加强版的通配符，需要先在代码里加上 <code>setopt EXTENDED_GLOB</code>。</p><table><thead><tr><th>通配符</th><th>含义</th><th>匹配的样例</th></tr></thead><tbody><tr><td>^abc</td><td>除了 abc 外的任意字符串</td><td>aaa</td></tr><tr><td>abc^abc</td><td>以 abc 开头，但后边不是 abc 的字符串</td><td>abcabd</td></tr><tr><td>a*c~abc</td><td>符合 a*c 但不是 abc 的字符串</td><td>adc</td></tr><tr><td>a#</td><td>任意数量（包括 0）个 a</td><td>aaa</td></tr><tr><td>b##</td><td>一个或者多个 b</td><td>b</td></tr><tr><td>(ab)##</td><td>一个或者多个 ab</td><td>abab</td></tr><tr><td>(#i)abc</td><td>忽略大小写的 abc</td><td>AbC</td></tr><tr><td>(#i)ab(#I)c</td><td>忽略大小写的 ab 接着 c</td><td>ABc</td></tr><tr><td>(#l)aBc</td><td>a 和 c 忽略大小写，但 B 必须大写 的 aBc</td><td>aBC</td></tr><tr><td>(#a1)abc</td><td>最多错（多或缺也算）一个字符的 abc</td><td>a2c 或 ab 或 abcd</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/goreliu/zshguide">zsh开发指南</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通配符（glob）是 shell 中的一个比较重要的概念，可以认为是正则表达式的简化版本。通配符在字符串匹配和文件名搜索等方面非常有用。本篇只讲它在字符串匹配上的用法&lt;/p&gt;
&lt;h1 id=&quot;通配符的基本用法&quot;&gt;&lt;a href=&quot;#通配符的基本用法&quot; class=&quot;headerlink&quot; title=&quot;通配符的基本用法&quot;&gt;&lt;/a&gt;通配符的基本用法&lt;/h1&gt;&lt;p&gt;之前在讲字符串匹配判断时，通配符出现过，就是 &lt;code&gt;*&amp;quot;$str&amp;quot;*&lt;/code&gt; 两边的星号。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str1=abcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str2=bc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 星号要在引号外边&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% [[ &lt;span class=&quot;variable&quot;&gt;$str1&lt;/span&gt; == *&lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$str2&lt;/span&gt;&amp;quot;&lt;/span&gt;* ]] &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注意带通配符的字符串必须放在右边&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% [[ *&lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$str2&lt;/span&gt;&amp;quot;&lt;/span&gt;* == &lt;span class=&quot;variable&quot;&gt;$str1&lt;/span&gt; ]] &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; good&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="zsh" scheme="http://kennethfan.github.io/tags/zsh/"/>
    
    <category term="shell" scheme="http://kennethfan.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>zsh-字符串转义和格式化</title>
    <link href="http://kennethfan.github.io/2017/09/20/zsh-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://kennethfan.github.io/2017/09/20/zsh-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2017-09-20T13:57:16.000Z</published>
    <updated>2017-09-20T16:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p>上一篇讲了 zsh 的常用字符串操作，这篇开始讲更为琐碎的转义字符和格式化输出相关内容。包括转义字符、引号、<code>print</code>、<code>printf</code> 的使用等等。其中很多内容没有必要记忆，作为手册参考即可。</p><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>转义字符是很多编程语言中都有的概念，它主要解决某些字符因为没有对应键盘按键无法直接输出、字符本身有特殊含义（比如 <code>\</code>、<code>&quot;</code>）或者显示不直观（比如难以区别多个空格和一个 tab）等问题。</p><p>最常用的转义字符是 <code>\n</code>（换行）、<code>\r</code>（回车）、<code>\t</code>（tab）。</p><p>直接用 <code>echo</code>、<code>print</code> 或者 <code>printf</code> 内置命令都可以正常输出转义字符，但包括转义字符的字符串需要用引号（单双引号都可以）扩起来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">echo</span> <span class="string">&#x27;Hello\n\tWorld&#x27;</span></span><br><span class="line">Hello</span><br><span class="line">        World</span><br></pre></td></tr></table></figure><p>常用转义字符对照表，不常用的可以去查 ASCII 码表，然后使用 <code>\xnn</code>（如 <code>\x14</code>）。</p><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII 码值（十六进制）</th></tr></thead><tbody><tr><td>\n</td><td>换行</td><td>0a</td></tr><tr><td>\r</td><td>回车</td><td>0d</td></tr><tr><td>\t</td><td>tab</td><td>09</td></tr><tr><td>\</td><td>\</td><td>5c</td></tr><tr><td>`</td><td>&#96;</td><td>60</td></tr><tr><td>\xnn</td><td>取决于 nn</td><td>nn</td></tr></tbody></table><p>可以用 <code>hexdump</code> 命令查看字符的 ASCII 码值。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">echo</span> ab= | hexdump -C</span><br><span class="line">00000000  61 62 3d 0a                                       |ab=.|</span><br><span class="line">00000004</span><br></pre></td></tr></table></figure><p>还有一些字符是可选转义（通常有特殊含义的字符都是如此）的，比如空格、<code>&quot;</code>、<code>&#39;</code>、<code>*</code>、<code>~</code>、<code>$</code>、<code>&amp;</code>、<code>(</code>、<code>)</code>、<code>[</code>、<code>]</code>、<code>&#123;</code>、<code>&#125;</code>、<code>;</code>、<code>?</code> 等等，即如果在引号里边则无需转义（即使转义也不出错，转义方法都说前边加一个 <code>\</code>），但如果在引号外边则需要转义。谨慎起见，包含半角符号的字符串全部用引号包含即可，可以避免不必要的麻烦。</p><p>可以这样检查一个字符在空格外是否需要转义，输出的字符中前边带 <code>\</code> 的都是需要的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% str=<span class="string">&#x27;~!@#$%^&amp;*()_+-=&#123;&#125;|[]:;&lt;&gt;?,./&quot;&#x27;</span></span><br><span class="line"><span class="comment"># -r 选项代表忽略字符串中的转义符合</span></span><br><span class="line"><span class="comment"># $&#123;(q)str&#125; 功能是为字符串中的特殊符号添加转义符号</span></span><br><span class="line">% <span class="built_in">print</span> -r <span class="variable">$&#123;(q)str&#125;</span></span><br><span class="line">\~\!@\<span class="comment">#\$%\^\&amp;\*\(\)_+-=\&#123;\&#125;\|\[\]:\;\&lt;\&gt;\?,./\&quot;</span></span><br></pre></td></tr></table></figure><h1 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h1><p>单引号的左右主要是为了避免字符串里的特殊字符起作用。在单引号中，只有一个字符需要转义，转义符号 <code>\</code> 。所以如果字符串里包含特殊符号时，最好使用单引号包含起来，避免不必要的麻烦。如果字符串需要包含单引号，可以使用这几种方法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用双引号包含</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="string">&quot;a&#x27;b&quot;</span></span><br><span class="line">a<span class="string">&#x27;b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 用转义符号</span></span><br><span class="line"><span class="string">% echo a\&#x27;</span>b</span><br><span class="line">a<span class="string">&#x27;b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 同时使用单引号和转义符号，用于包含单引号和其他特殊符号的场景</span></span><br><span class="line"><span class="string">% echo &#x27;</span>a<span class="string">&quot;\&#x27;\&#x27;&#x27;b*?&#x27;</span></span><br><span class="line"><span class="string">a&quot;</span>\<span class="string">&#x27;b*?</span></span><br></pre></td></tr></table></figure><h1 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h1><p>双引号的作用类似单引号，但没有单引号那么严格，有些特殊字符在双引号里可以继续起作用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以使用变量</span></span><br><span class="line">% str=abc</span><br><span class="line">% <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$str</span>&quot;</span></span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 $( ) 运行命令</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(ls)</span>&quot;</span></span><br><span class="line">git</span><br><span class="line">tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 ` ` 运行命令，不建议在脚本里使用 ` `</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="string">&quot;`date`&quot;</span></span><br><span class="line">Mon Aug 28 09:49:11 CST 2017</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 $(( )) 计算数值</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$((1 + 2)</span>)&quot;</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 $[ ] 计算数值</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="string">&quot;$[1 + 2]&quot;</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>简单说，<code>$</code> 加各种东西的用法在双引号里都是可以正常使用的，而其他特殊符号（比如 <code>*</code>、<code>?</code>、<code>&gt;</code>）的功能通常不可用。</p><h1 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h1><p>反引号是用来运行命令的，它会返回命令结果，以便保存到变量等等。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">% str=`<span class="built_in">ls</span>`</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">git</span><br><span class="line">tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完全可以用 $( ) 取代</span></span><br><span class="line">% str=$(<span class="built_in">ls</span>)</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">git</span><br><span class="line">tmp</span><br></pre></td></tr></table></figure><p>反引号的功能和 <code>$( )</code> 功能基本一样，但 <code>$( )</code> 可以嵌套，而反引号不可以，而且反引号看起来更费事，某些字体中的反引号和单引号差别不大。所以在脚本里不建议使用反引号。</p><span id="more"></span><h1 id="print-命令用法"><a href="#print-命令用法" class="headerlink" title="print 命令用法"></a>print 命令用法</h1><p><code>print</code> 是类似 <code>echo</code> 的内部命令（<code>echo</code> 命令很简单，不作介绍），但功能比 <code>echo</code> 强大很多。完全可以使用 <code>print</code> 代替 <code>echo</code>。</p><p>不加参数的 <code>print</code> 和 <code>echo</code> 的功能基本一样，但如果字符串里包含转义字符，某些情况可能不一致。如果需要输出转义字符，尽量统一使用 <code>print</code>，避免不一致导致的麻烦。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> <span class="string">&#x27;Line\tone\n\Line\ttwo&#x27;</span></span><br><span class="line">Line    one</span><br><span class="line">Line    two</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo 的输出和 print 不一致</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="string">&#x27;Line\tone\n\Line\ttwo&#x27;</span></span><br><span class="line">Line    one</span><br><span class="line">\Line   two</span><br></pre></td></tr></table></figure><p><code>print</code> 有很多参数，在 zsh 里输入 <code>print -</code> 然后按 tab 即可查看选项帮助（如果没有效果，需要配置 <code>~/.zshrc</code> 里的补全选项，网上有很多现成的配置）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># - 后直接按 tab，C 是补全上去的</span><br><span class="line">% print -C</span><br><span class="line"> -- option --</span><br><span class="line">-C  -- print arguments in specified number of columns</span><br><span class="line">-D  -- substitute any arguments which are named directories using ~ notation</span><br><span class="line">-N  -- print arguments separated and terminated by nulls</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="print-命令选项功能介绍"><a href="#print-命令选项功能介绍" class="headerlink" title="print 命令选项功能介绍"></a>print 命令选项功能介绍</h2><p>这里以常用程度的顺序依次介绍所有的选项，另外文末有“<code>print</code> 选项列表”方便查询。</p><p><code>-l</code> 用于分行输出字符串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个字符串一行，字符串列表是用空格隔开的</span></span><br><span class="line">% <span class="built_in">print</span> -l aa bb</span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以接数组，数组相关的内容之后会讲到</span></span><br><span class="line"><span class="comment"># 命令后的多个字符串都可以用数组取代，效果是相同的</span></span><br><span class="line">% array=(aa bb)</span><br><span class="line">% <span class="built_in">print</span> -l <span class="variable">$array</span></span><br><span class="line">aa</span><br><span class="line">bb</span><br></pre></td></tr></table></figure><p><code>-n</code> 用于不在输出内容的末尾自动添加换行符（<code>echo</code> 命令也有这个用法）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> abc</span><br><span class="line">abc</span><br><span class="line"><span class="comment"># 下面输出 abc 后的 % 高亮显示，代表这一行末尾没有换行符</span></span><br><span class="line">% <span class="built_in">print</span> -n abc</span><br><span class="line">abc%</span><br></pre></td></tr></table></figure><p><code>-m</code> 用于只输出匹配到的字符串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -m <span class="string">&quot;aa*&quot;</span> aabb abc aac</span><br><span class="line">aabb aac</span><br></pre></td></tr></table></figure><p><code>-o/-O/-i</code> 用于对字符串排序：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print -o 对字符串升序排列</span></span><br><span class="line">% <span class="built_in">print</span> -o a d c 1 b g 3 s</span><br><span class="line">1 3 a b c d g s</span><br><span class="line"></span><br><span class="line"><span class="comment"># print -O 对字符串降序排列</span></span><br><span class="line">% <span class="built_in">print</span> -O a d c 1 b g 3 s</span><br><span class="line">s g d c b a 3 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加 -i 参数后，对大小写不敏感</span></span><br><span class="line">% <span class="built_in">print</span> -oi A B C a c A B C</span><br><span class="line">A a A B B C c C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不加 -i 的话小写排在大写的前面</span></span><br><span class="line">% <span class="built_in">print</span> -o A B C a c A B C</span><br><span class="line">a A A B B c C C</span><br></pre></td></tr></table></figure><p><code>-r</code> 用于不对字符串进行转义。<code>print</code> 默认是会对转义字符进行转义的，加 <code>-r</code> 后会原样输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -r <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">\n</span><br></pre></td></tr></table></figure><p><code>-c</code> 用于将字符串按列输出。如果对自动决定的列数不满意，可以用 <code>-C</code> 指定列数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -c a bbbbb ccc ddddd ee ffffff gg hhhhhh ii jj kk</span><br><span class="line">a       ccc     ee      gg      ii      kk</span><br><span class="line">bbbbb   ddddd   ffffff  hhhhhh  jj</span><br></pre></td></tr></table></figure><p><code>-C</code> 用于按指定列数输出字符串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从上到下</span></span><br><span class="line">% <span class="built_in">print</span> -C 3 a bb ccc dddd ee f</span><br><span class="line">a     ccc   ee</span><br><span class="line">bb    dddd  f</span><br><span class="line"></span><br><span class="line">% <span class="built_in">print</span> -C 3 a bb ccc dddd ee f g</span><br><span class="line">a     dddd  g</span><br><span class="line">bb    ee</span><br><span class="line">ccc   f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加 -a 后，改成从左向右</span></span><br><span class="line">% <span class="built_in">print</span> -a -C 3 a bb ccc dddd ee f g</span><br><span class="line">a     bb    ccc</span><br><span class="line">dddd  ee    f</span><br><span class="line">g</span><br></pre></td></tr></table></figure><p><code>-D</code> 用于将符合条件的路径名转化成带 ~ 的格式（~ 是家目录）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -D /home/goreliu/git</span><br><span class="line">~/git</span><br><span class="line"></span><br><span class="line"><span class="comment"># mine 是这样定义的 hash -d mine=&#x27;/mnt/c/mine&#x27;</span></span><br><span class="line">% <span class="built_in">print</span> -D /mnt/c/mine</span><br><span class="line">~mine</span><br></pre></td></tr></table></figure><p><code>-N</code> 用于将输出的字符串以 <code>\x00</code>（null）分隔，而不是空格。这样可能方便处理包含空格的字符串，<code>xargs</code> 等命令也可以接受以 <code>\x00</code> 分隔的字符串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -N aa bb cc</span><br><span class="line">aabbcc%</span><br><span class="line"></span><br><span class="line">% <span class="built_in">print</span> -N aa bb cc | hexdump -C</span><br><span class="line">00000000  61 61 00 62 62 00 63 63  00                       |aa.bb.cc.|</span><br><span class="line">00000009</span><br></pre></td></tr></table></figure><p><code>-x</code> 用于将行首的 tab 替换成空格。<code>-x</code> 是将行首的 tab 展开成空格，<code>-x</code> 后的参数是一个 tab 对应的空格数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -x 2 <span class="string">&#x27;\t\tabc&#x27;</span> | hexdump -C</span><br><span class="line">00000000  20 20 20 20 61 62 63 0a                           |    abc.|</span><br><span class="line">00000008</span><br><span class="line"></span><br><span class="line">% <span class="built_in">print</span> -x 4 <span class="string">&#x27;\t\tabc&#x27;</span> | hexdump -C</span><br><span class="line">00000000  20 20 20 20 20 20 20 20  61 62 63 0a              |        abc.|</span><br><span class="line">0000000c</span><br></pre></td></tr></table></figure><p><code>-X</code> 用于将所有的 tab 补全成空格。注意不是简单地替换成空格。比如每行有一个 tab，<code>-X 8</code>，那么如果 tab 前（到行首或者上一个 tab）有 5 个字符，就补全 3 个空格，凑够 8，这么做是为了对齐每一列的。但如果前边有 8 个或者 8 个以上字符，那么依然是一个 tab 替换成 8 个字符，因为 tab 不能凭空消失，一定要转成至少一个空格才行。如果没理解就自己多试试找规律吧。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -X 2 <span class="string">&#x27;ab\t\tabc&#x27;</span> | hexdump -C</span><br><span class="line">00000000  61 62 20 20 20 20 61 62  63 0a                    |ab    abc.|</span><br><span class="line">0000000a</span><br><span class="line"></span><br><span class="line">% <span class="built_in">print</span> -X 4 <span class="string">&#x27;ab\t\tabc&#x27;</span> | hexdump -C</span><br><span class="line">00000000  61 62 20 20 20 20 20 20  61 62 63 0a              |ab      abc.|</span><br><span class="line">0000000c</span><br></pre></td></tr></table></figure><p><code>-u</code> 用于指定文件描述符（fd）输出。<code>print</code> 默认输出到 fd 1，即 stdout，可以指定成其他 fd（2 是 stderr，其他的可以运行 <code>ls -l /proc/$$/fd</code> 查看。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -u 2 good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和重定向输出效果一样</span></span><br><span class="line">% <span class="built_in">print</span> good &gt;&amp;2</span><br></pre></td></tr></table></figure><p><code>-v</code> 用于把输出内容保存到变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和 str=&quot;$(print aa bb cc)&quot; 效果一样</span></span><br><span class="line">% <span class="built_in">print</span> -v str aa bb cc</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">aa bb cc</span><br></pre></td></tr></table></figure><p><code>-s/-S</code> 用于把字符串保存到历史记录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">print</span> -s <span class="built_in">ls</span> -a</span><br><span class="line">% <span class="built_in">history</span> | <span class="built_in">tail</span> -n 1</span><br><span class="line"> 2222  <span class="built_in">ls</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># -S 也类似，但需要用引号把命令引起来</span></span><br><span class="line">% <span class="built_in">print</span> -S <span class="string">&quot;ls -a&quot;</span></span><br><span class="line">% <span class="built_in">history</span> | <span class="built_in">tail</span> -n 1</span><br><span class="line"> 2339  <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p><code>-z</code> 用于把字符串输出到命令行编辑区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _是光标位置</span></span><br><span class="line">% <span class="built_in">print</span> -z aa bb cc</span><br><span class="line">% aa bb cc_</span><br></pre></td></tr></table></figure><p><code>-f</code> 用于按指定格式化字符串输出，同 <code>printf</code>，用法见“<code>printf</code> 命令用法”。</p><p><code>-P</code> 用于输出带颜色和特殊样式的字符串，见“输出带颜色和特殊样式的字符串”。</p><p><code>-b</code> 用于辨认出 bindkey 中的转义字符串，bindkey 是 Zle 的快捷键配置内容，写脚本用不到，不作介绍。</p><p><code>-R</code> 用于模拟 <code>echo</code> 命令，只支持 <code>-n</code> 和 <code>-e</code> 选项，通常用不到。</p><h1 id="printf-命令用法"><a href="#printf-命令用法" class="headerlink" title="printf 命令用法"></a>printf 命令用法</h1><p><code>printf</code> 命令很像 c 语言的 <code>printf</code> 函数，用于输出格式化后的字符串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 末尾输出高亮的 % 代表该行末尾没有换行符</span></span><br><span class="line"><span class="comment"># printf 不会在输出末尾自动添加换行符</span></span><br><span class="line"><span class="comment"># 为了避免误解，之后的例子省略该 % 符号</span></span><br><span class="line">% <span class="built_in">printf</span> <span class="string">&quot;:%d %f:&quot;</span> 12 34.56</span><br><span class="line">:12 34.560000:%</span><br></pre></td></tr></table></figure><p><code>printf</code> 的第一个参数是格式化字符串，在 zsh 里输入 <code>printf %</code> 后按 tab，可以看到所有支持的用法。下面只举几个比较常用的例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数 浮点数 字符串</span></span><br><span class="line">% <span class="built_in">printf</span> <span class="string">&quot;%d %f %s&quot;</span> 12 12.34 abcd</span><br><span class="line">12 12.340000 abcd%</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取小数点后 1 位</span></span><br><span class="line">% <span class="built_in">printf</span> <span class="string">&quot;%.1f&quot;</span> 12.34</span><br><span class="line">12.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 科学计数法输出浮点数</span></span><br><span class="line">% <span class="built_in">printf</span> <span class="string">&quot;%e&quot;</span> 12.34</span><br><span class="line">1.234000e+01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将十进制数字转成十六进制输出</span></span><br><span class="line">% <span class="built_in">printf</span> <span class="string">&quot;%x&quot;</span> 12</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补齐空格或者补齐 0</span></span><br><span class="line">% <span class="built_in">printf</span> <span class="string">&quot;%5d\n%05d&quot;</span> 12 12</span><br><span class="line">   12</span><br><span class="line">00012</span><br></pre></td></tr></table></figure><p>我把完整的格式贴在这里，方便搜索：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> -- <span class="built_in">print</span> format specifier --</span><br><span class="line">      -- leave one space <span class="keyword">in</span> front of positive number from signed conversion</span><br><span class="line">-     -- left adjust result</span><br><span class="line">.     -- precision</span><br><span class="line"><span class="string">&#x27;     -- thousand separators</span></span><br><span class="line"><span class="string">*     -- field width in next argument</span></span><br><span class="line"><span class="string">#     -- alternate form</span></span><br><span class="line"><span class="string">%     -- a percent sign</span></span><br><span class="line"><span class="string">+     -- always place sign before a number from signed conversion</span></span><br><span class="line"><span class="string">0     -- zero pad to length</span></span><br><span class="line"><span class="string">b     -- as %s but interpret escape sequences in argument</span></span><br><span class="line"><span class="string">c     -- print the first character of the argument</span></span><br><span class="line"><span class="string">E  e  -- double number in scientific notation</span></span><br><span class="line"><span class="string">f     -- double number</span></span><br><span class="line"><span class="string">G  g  -- double number as %f or %e depending on size</span></span><br><span class="line"><span class="string">i  d  -- signed decimal number or with leading &quot; numeric value of following character</span></span><br><span class="line"><span class="string">n     -- store number of printed bytes in parameter specified by argument</span></span><br><span class="line"><span class="string">o     -- unsigned octal number</span></span><br><span class="line"><span class="string">q     -- as %s but shell quote result</span></span><br><span class="line"><span class="string">s     -- print the argument as a string</span></span><br><span class="line"><span class="string">u     -- unsigned decimal number</span></span><br><span class="line"><span class="string">X  x  -- unsigned hexadecimal number, letters capitalized as x</span></span><br></pre></td></tr></table></figure><h2 id="输出带颜色和特殊样式的字符串"><a href="#输出带颜色和特殊样式的字符串" class="headerlink" title="输出带颜色和特殊样式的字符串"></a>输出带颜色和特殊样式的字符串</h2><p>用 zsh 的 <code>print -P</code> 可以方便地输出带颜色和特殊样式的字符串，不用再和 <code>\033[41;36;1m</code> 之类莫名其妙的字符串打交道了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %B 加粗 %b 取消加粗</span></span><br><span class="line"><span class="comment"># %F&#123;red&#125; 前景色 %f 取消前景色</span></span><br><span class="line"><span class="comment"># %K&#123;red&#125; 背景色 %k 取消背景色</span></span><br><span class="line"><span class="comment"># %U 下滑线 %u 取消下滑线</span></span><br><span class="line"><span class="comment"># %S 反色 %s 取消反色</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># black or 0  red     or 1</span></span><br><span class="line"><span class="comment"># green or 2  yellow  or 3</span></span><br><span class="line"><span class="comment"># blue  or 4  magenta or 5</span></span><br><span class="line"><span class="comment"># cyan  or 6  white   or 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示加粗的红色 abc</span></span><br><span class="line">% <span class="built_in">print</span> -P <span class="string">&#x27;%B%F&#123;red&#125;abc&#x27;</span></span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没覆盖到的功能可以用原始的转义符号，可读性比较差</span></span><br><span class="line"><span class="comment"># 4[0-7] 背景色</span></span><br><span class="line"><span class="comment"># 3[0-7] 前景色</span></span><br><span class="line"><span class="comment"># 0m 正常 1m 加粗 2m 变灰 3m 斜体 4m 下滑钱 5m 闪烁 6m 快速闪烁 7m 反色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示闪烁的红底绿字 abc</span></span><br><span class="line">% <span class="built_in">print</span> <span class="string">&quot;\033[41;32;5mabc\033[0m&quot;</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h2 id="print-选项列表"><a href="#print-选项列表" class="headerlink" title="print 选项列表"></a>print 选项列表</h2><p>为了方便查询，我把 <code>print</code> 的选项列表放在这里：</p><table><thead><tr><th>选项</th><th>功能</th><th>参数</th></tr></thead><tbody><tr><td>-C</td><td>按列输出</td><td>列数</td></tr><tr><td>-D</td><td>替换路径成带 <code>~</code> 的版本</td><td>无</td></tr><tr><td>-N</td><td>使用 <code>\x00</code> 作为字符串的间隔</td><td>无</td></tr><tr><td>-O</td><td>降序排列</td><td>无</td></tr><tr><td>-P</td><td>输出颜色和特殊样式</td><td>无</td></tr><tr><td>-R</td><td>模拟 <code>echo</code> 命令</td><td>无</td></tr><tr><td>-S</td><td>放命令放入历史命令文件（要加引号）</td><td>无</td></tr><tr><td>-X</td><td>替换所有 tab 为空格</td><td>tab 对应空格数</td></tr><tr><td>-a</td><td>和 <code>-c</code>&#x2F;<code>-C</code> 一起使用时，改为从左到右</td><td>无</td></tr><tr><td>-b</td><td>识别出 bindkey 转义字符串</td><td>无</td></tr><tr><td>-c</td><td>按列输出（自动决定列数）</td><td>无</td></tr><tr><td>-f</td><td>同 <code>printf</code></td><td>无</td></tr><tr><td>-i</td><td>和 <code>-o</code>&#x2F;<code>-O</code> 一起用时，大小写不敏感排序</td><td>无</td></tr><tr><td>-l</td><td>使用换行符作为字符串分隔符</td><td>无</td></tr><tr><td>-m</td><td>只输出匹配的字符串</td><td>匹配模式字符串</td></tr><tr><td>-n</td><td>不自动添加最后的换行符</td><td>无</td></tr><tr><td>-o</td><td>升序排列</td><td>无</td></tr><tr><td>-r</td><td>不处理转义字符</td><td>无</td></tr><tr><td>-s</td><td>放命令放入历史命令文件（不加引号）</td><td>无</td></tr><tr><td>-u</td><td>指定 fd 输出</td><td>fd 号</td></tr><tr><td>-v</td><td>把内容保存到变量</td><td>变量名</td></tr><tr><td>-x</td><td>替换行首的 tab 为空格</td><td>tab 对应空格数</td></tr><tr><td>-z</td><td>把内容放置到命令行编辑区</td><td>无</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/goreliu/zshguide">zsh开发指南</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h1&gt;&lt;p&gt;上一篇讲了 zsh 的常用字符串操作，这篇开始讲更为琐碎的转义字符和格式化输出相关内容。包括转义字符、引号、&lt;code&gt;print&lt;/code&gt;、&lt;code&gt;printf&lt;/code&gt; 的使用等等。其中很多内容没有必要记忆，作为手册参考即可。&lt;/p&gt;
&lt;h1 id=&quot;转义字符&quot;&gt;&lt;a href=&quot;#转义字符&quot; class=&quot;headerlink&quot; title=&quot;转义字符&quot;&gt;&lt;/a&gt;转义字符&lt;/h1&gt;&lt;p&gt;转义字符是很多编程语言中都有的概念，它主要解决某些字符因为没有对应键盘按键无法直接输出、字符本身有特殊含义（比如 &lt;code&gt;&#92;&lt;/code&gt;、&lt;code&gt;&amp;quot;&lt;/code&gt;）或者显示不直观（比如难以区别多个空格和一个 tab）等问题。&lt;/p&gt;
&lt;p&gt;最常用的转义字符是 &lt;code&gt;&#92;n&lt;/code&gt;（换行）、&lt;code&gt;&#92;r&lt;/code&gt;（回车）、&lt;code&gt;&#92;t&lt;/code&gt;（tab）。&lt;/p&gt;
&lt;p&gt;直接用 &lt;code&gt;echo&lt;/code&gt;、&lt;code&gt;print&lt;/code&gt; 或者 &lt;code&gt;printf&lt;/code&gt; 内置命令都可以正常输出转义字符，但包括转义字符的字符串需要用引号（单双引号都可以）扩起来。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello&#92;n&#92;tWorld&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        World&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;常用转义字符对照表，不常用的可以去查 ASCII 码表，然后使用 &lt;code&gt;&#92;xnn&lt;/code&gt;（如 &lt;code&gt;&#92;x14&lt;/code&gt;）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;转义字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;ASCII 码值（十六进制）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&#92;n&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;td&gt;0a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#92;r&lt;/td&gt;
&lt;td&gt;回车&lt;/td&gt;
&lt;td&gt;0d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#92;t&lt;/td&gt;
&lt;td&gt;tab&lt;/td&gt;
&lt;td&gt;09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#92;&lt;/td&gt;
&lt;td&gt;&#92;&lt;/td&gt;
&lt;td&gt;5c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;&amp;#96;&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#92;xnn&lt;/td&gt;
&lt;td&gt;取决于 nn&lt;/td&gt;
&lt;td&gt;nn&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可以用 &lt;code&gt;hexdump&lt;/code&gt; 命令查看字符的 ASCII 码值。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; ab= | hexdump -C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000  61 62 3d 0a                                       |ab=.|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000004&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;还有一些字符是可选转义（通常有特殊含义的字符都是如此）的，比如空格、&lt;code&gt;&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;#39;&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;~&lt;/code&gt;、&lt;code&gt;$&lt;/code&gt;、&lt;code&gt;&amp;amp;&lt;/code&gt;、&lt;code&gt;(&lt;/code&gt;、&lt;code&gt;)&lt;/code&gt;、&lt;code&gt;[&lt;/code&gt;、&lt;code&gt;]&lt;/code&gt;、&lt;code&gt;&amp;#123;&lt;/code&gt;、&lt;code&gt;&amp;#125;&lt;/code&gt;、&lt;code&gt;;&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt; 等等，即如果在引号里边则无需转义（即使转义也不出错，转义方法都说前边加一个 &lt;code&gt;&#92;&lt;/code&gt;），但如果在引号外边则需要转义。谨慎起见，包含半角符号的字符串全部用引号包含即可，可以避免不必要的麻烦。&lt;/p&gt;
&lt;p&gt;可以这样检查一个字符在空格外是否需要转义，输出的字符中前边带 &lt;code&gt;&#92;&lt;/code&gt; 的都是需要的。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=&lt;span class=&quot;string&quot;&gt;&amp;#x27;~!@#$%^&amp;amp;*()_+-=&amp;#123;&amp;#125;|[]:;&amp;lt;&amp;gt;?,./&amp;quot;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -r 选项代表忽略字符串中的转义符合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# $&amp;#123;(q)str&amp;#125; 功能是为字符串中的特殊符号添加转义符号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; -r &lt;span class=&quot;variable&quot;&gt;$&amp;#123;(q)str&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#92;~&#92;!@&#92;&lt;span class=&quot;comment&quot;&gt;#&#92;$%&#92;^&#92;&amp;amp;&#92;*&#92;(&#92;)_+-=&#92;&amp;#123;&#92;&amp;#125;&#92;|&#92;[&#92;]:&#92;;&#92;&amp;lt;&#92;&amp;gt;&#92;?,./&#92;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;单引号&quot;&gt;&lt;a href=&quot;#单引号&quot; class=&quot;headerlink&quot; title=&quot;单引号&quot;&gt;&lt;/a&gt;单引号&lt;/h1&gt;&lt;p&gt;单引号的左右主要是为了避免字符串里的特殊字符起作用。在单引号中，只有一个字符需要转义，转义符号 &lt;code&gt;&#92;&lt;/code&gt; 。所以如果字符串里包含特殊符号时，最好使用单引号包含起来，避免不必要的麻烦。如果字符串需要包含单引号，可以使用这几种方法。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 用双引号包含&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;#x27;b&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;span class=&quot;string&quot;&gt;&amp;#x27;b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;# 用转义符号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;% echo a&#92;&amp;#x27;&lt;/span&gt;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;span class=&quot;string&quot;&gt;&amp;#x27;b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;# 同时使用单引号和转义符号，用于包含单引号和其他特殊符号的场景&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;% echo &amp;#x27;&lt;/span&gt;a&lt;span class=&quot;string&quot;&gt;&amp;quot;&#92;&amp;#x27;&#92;&amp;#x27;&amp;#x27;b*?&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;a&amp;quot;&lt;/span&gt;&#92;&lt;span class=&quot;string&quot;&gt;&amp;#x27;b*?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;双引号&quot;&gt;&lt;a href=&quot;#双引号&quot; class=&quot;headerlink&quot; title=&quot;双引号&quot;&gt;&lt;/a&gt;双引号&lt;/h1&gt;&lt;p&gt;双引号的作用类似单引号，但没有单引号那么严格，有些特殊字符在双引号里可以继续起作用。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 以使用变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str=abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可以使用 $( ) 运行命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;$(ls)&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可以使用 ` ` 运行命令，不建议在脚本里使用 ` `&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;`date`&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mon Aug 28 09:49:11 CST 2017&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可以使用 $(( )) 计算数值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;$((1 + 2)&lt;/span&gt;)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可以使用 $[ ] 计算数值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;$[1 + 2]&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;简单说，&lt;code&gt;$&lt;/code&gt; 加各种东西的用法在双引号里都是可以正常使用的，而其他特殊符号（比如 &lt;code&gt;*&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;）的功能通常不可用。&lt;/p&gt;
&lt;h1 id=&quot;反引号&quot;&gt;&lt;a href=&quot;#反引号&quot; class=&quot;headerlink&quot; title=&quot;反引号&quot;&gt;&lt;/a&gt;反引号&lt;/h1&gt;&lt;p&gt;反引号是用来运行命令的，它会返回命令结果，以便保存到变量等等。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=`&lt;span class=&quot;built_in&quot;&gt;ls&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 完全可以用 $( ) 取代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str=$(&lt;span class=&quot;built_in&quot;&gt;ls&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;反引号的功能和 &lt;code&gt;$( )&lt;/code&gt; 功能基本一样，但 &lt;code&gt;$( )&lt;/code&gt; 可以嵌套，而反引号不可以，而且反引号看起来更费事，某些字体中的反引号和单引号差别不大。所以在脚本里不建议使用反引号。&lt;/p&gt;</summary>
    
    
    
    
    <category term="zsh" scheme="http://kennethfan.github.io/tags/zsh/"/>
    
    <category term="shell" scheme="http://kennethfan.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>zsh-字符串常用操作</title>
    <link href="http://kennethfan.github.io/2017/09/20/zsh-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://kennethfan.github.io/2017/09/20/zsh-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2017-09-20T13:10:45.000Z</published>
    <updated>2017-09-20T14:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>   zsh 的字符串处理功能，要比绝大多数编程语言自带的字符串函数库或者类库要强大（在不依赖外部命令的情况）。同时各种用法也比较怪异，很多时候简洁性和可读性是有矛盾的，很难兼顾。而 shell 的使用场景决定简洁性是不能被牺牲掉的，即使用 Python 这样比较简洁的语言来处理字符串，很多时候也只能写出冗长的代码，而 zsh 经常可以一行搞定（可能有人想到了 Perl，Perl 在处理文本方面确实有比较明显的优势，但使用 Perl 的话也要承担更多的成本），如果再加上适当地使用外部命令，基本可以应付大多数字符串处理场景。因为字符串处理的内容比较丰富，我会分多篇文章写。本篇只涉及最基础和常用的字符串操作，包括字符串的拼接、切片、截断、查找、遍历、替换、匹配、大小写转换、分隔等等。</p><h1 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">% str=abcde</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$#str</span></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取函数或者脚本的第一个参数的长度</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$#1</span></span><br></pre></td></tr></table></figure><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% str1=abc</span><br><span class="line">% str2=def</span><br><span class="line"></span><br><span class="line">% str2+=<span class="variable">$str1</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str2</span></span><br><span class="line">defabc</span><br><span class="line"></span><br><span class="line">% str3=$str1<span class="variable">$str2</span></span><br><span class="line">abcdefabc</span><br></pre></td></tr></table></figure><h1 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% str=abcdef</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[2,4]</span><br><span class="line">bcd</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[2,-1]</span><br><span class="line">bcdef</span><br><span class="line"></span><br><span class="line"><span class="comment"># $1 是文件或者函数的第一个参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;1[2,4]&#125;</span></span><br></pre></td></tr></table></figure><p>字符串切片还有另一种风格的方法，即 bash 风格，功能大同小异。通常没有必要用这个，而且因为字符位置是从 0 开始算，容易混淆。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% str=abcdef</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str:1:3&#125;</span></span><br><span class="line">bcd</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str:1:-1&#125;</span></span><br><span class="line">bcde</span><br></pre></td></tr></table></figure><h2 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a>字符串截断</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">% str=abcdeabcde</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除左端匹配到的内容，最小匹配</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str#*b&#125;</span></span><br><span class="line">cdeabcde</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除右端匹配到的内容，最小匹配</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str%d*&#125;</span></span><br><span class="line">abcdeabc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除左端匹配到的内容，最大匹配</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str##*b&#125;</span></span><br><span class="line">cde</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除右端匹配到的内容</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str%%d*&#125;</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h1 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h1><p>子字符串定位。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">% str=abcdef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用的是 i 的大写，不是 L 的小写</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[(I)<span class="built_in">cd</span>]</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment"># I 是从右往左找，如果找不到则为 0, 方便用来判断</span></span><br><span class="line">% ((<span class="variable">$str</span>[(I)cd])) &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找不到则为 0</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[(I)cdd]</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用小 i，小 i 是从左往右找，找不到则返回数组大小 + 1</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[(i)<span class="built_in">cd</span>]</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[(i)cdd]</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h1 id="遍历字符"><a href="#遍历字符" class="headerlink" title="遍历字符"></a>遍历字符</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% str=abcd</span><br><span class="line"></span><br><span class="line">% <span class="keyword">for</span> i (&#123;1..<span class="variable">$#str</span>&#125;) &#123;</span><br><span class="line">&gt;    <span class="built_in">echo</span> <span class="variable">$str</span>[i]</span><br><span class="line">&gt;&#125;</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure><h1 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h1><p>按内容替换和删除字符。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">% str=abcdefg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一对一地替换</span></span><br><span class="line">% str[2]=1</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">a1cdefg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以多对多（也包括一对多和多对一）地替换字符，两边的字符数量不需要一致。</span></span><br><span class="line"><span class="comment"># 把第二、三个字符替换成 2345</span></span><br><span class="line">% str[2,3]=2345</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">a2345defg</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="判断字符串变量是否存在"><a href="#判断字符串变量是否存在" class="headerlink" title="判断字符串变量是否存在"></a>判断字符串变量是否存在</h1><p>如果用 <code>[[ &quot;$strxx&quot; == &quot;&quot; ]]</code> ，那无法区分变量是没有定义还是内容为空，在某些情况是需要区分二者的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% (($+strxx)) &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line"></span><br><span class="line">% strxx=<span class="string">&quot;&quot;</span></span><br><span class="line">% (($+strxx)) &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br></pre></td></tr></table></figure><p><code>(($+var))</code> 的用法也可以用来判断其他类型的变量，如果变量存在则返回真（0），否则返回假（1）。</p><h1 id="字符串匹配判断"><a href="#字符串匹配判断" class="headerlink" title="字符串匹配判断"></a>字符串匹配判断</h1><h2 id="判断是否包含字符串"><a href="#判断是否包含字符串" class="headerlink" title="判断是否包含字符串"></a>判断是否包含字符串</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% str1=abcd</span><br><span class="line">% str2=bc</span><br><span class="line"></span><br><span class="line">% [[ <span class="variable">$str1</span> == *<span class="variable">$str2</span>* ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br></pre></td></tr></table></figure><h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% str=abc55def</span><br><span class="line"></span><br><span class="line"><span class="comment"># 少量字符串的话，尽量不要用 grep</span></span><br><span class="line"><span class="comment"># 本文不讲正则表达式格式相关内容</span></span><br><span class="line"><span class="comment"># 另外 zsh 有专门的正则表达式模块</span></span><br><span class="line">% [[ <span class="variable">$str</span> =~ <span class="string">&quot;c[0-9]&#123;2&#125;\de&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> a</span><br><span class="line">a</span><br></pre></td></tr></table></figure><h1 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">% str=<span class="string">&quot;ABCDE abcde&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成大写，(U) 和 :u 两种用法效果一样</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;(U)str&#125;</span> --- <span class="variable">$&#123;str:u&#125;</span></span><br><span class="line">ABCDE ABCDE --- ABCDE ABCDE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成小写，(L) 和 :l 两种用法效果一样</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;(L)str&#125;</span> --- <span class="variable">$&#123;str:l&#125;</span></span><br><span class="line">abcde abcde --- abcde abcde</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成首字母大写</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;(C)str&#125;</span> </span><br><span class="line">Abcde Abcde</span><br></pre></td></tr></table></figure><h1 id="目录文件名截取"><a href="#目录文件名截取" class="headerlink" title="目录文件名截取"></a>目录文件名截取</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">% filepath=/a/b/c.x</span><br><span class="line"></span><br><span class="line"><span class="comment"># :h 是取目录名，即最后一个 / 之前的部分，如果没有 / 则为 .</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;filepath:h&#125;</span></span><br><span class="line">/a/b</span><br><span class="line"></span><br><span class="line"><span class="comment"># :t 是取文件名，即最后一个 / 之后的部分，如果没有 / 则为字符串本身</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;filepath:t&#125;</span></span><br><span class="line">c.x</span><br><span class="line"></span><br><span class="line"><span class="comment"># :e 是取文件扩展名，即文件名中最后一个点之后的部分，如果没有点则为空</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;filepath:e&#125;</span></span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"><span class="comment"># :r 是去掉末尾扩展名的路径</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;filepath:r&#125;</span></span><br><span class="line">/a/b/c</span><br></pre></td></tr></table></figure><h1 id="字符串分隔"><a href="#字符串分隔" class="headerlink" title="字符串分隔"></a>字符串分隔</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用空格作为分隔符，多个空格也只算一个分隔符</span></span><br><span class="line">% str=<span class="string">&#x27;aa bb cc dd&#x27;</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str[(w)2]&#125;</span></span><br><span class="line">bb</span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str[(w)3]&#125;</span></span><br><span class="line">cc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定分隔符</span></span><br><span class="line">% str=<span class="string">&#x27;aa--bb--cc&#x27;</span></span><br><span class="line"><span class="comment"># 如果分隔符是 : 就用别的字符作为左右界，比如 ws.:.</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;str[(ws:--:)3]&#125;</span></span><br><span class="line">cc</span><br></pre></td></tr></table></figure><h1 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% str=<span class="string">&quot;line1</span></span><br><span class="line"><span class="string">&gt; line2&quot;</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">line1</span><br><span class="line">line2</span><br></pre></td></tr></table></figure><h1 id="读取文件内容到字符串"><a href="#读取文件内容到字符串" class="headerlink" title="读取文件内容到字符串"></a>读取文件内容到字符串</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比用 str=$(cat filename) 性能好很多</span></span><br><span class="line">str=$(&lt;filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比用 cat filename 性能好很多，引号不能省略，省略了之后就不换行了</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(&lt;filename)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每行，引号不能省略</span></span><br><span class="line"><span class="keyword">for</span> i (<span class="variable">$&#123;(f)&quot;$(&lt;filename)&quot;&#125;</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取文件指定行"><a href="#读取文件指定行" class="headerlink" title="读取文件指定行"></a>读取文件指定行</h2><p>文件 test.txt 内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">line 1. apple</span><br><span class="line">line 2. orange</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 小文件或者需要频繁调用时，尽量不要用 sed</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;&quot;$(&lt;test.txt)&quot;[(f)2]&#125;</span></span><br><span class="line">line 2. orange</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出包含 “ang” 的第一行</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$&#123;&quot;$(&lt;test.txt)&quot;[(fr)*ang*]&#125;</span></span><br><span class="line">line 2. orange</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出包含 pp 的第一行，但从左截掉 “line” 4个字符。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;&quot;$(&lt;test.txt)&quot;[(fr)*pp*]#line&#125;</span></span><br></pre></td></tr></table></figure><h1 id="读取进程输出到字符串"><a href="#读取进程输出到字符串" class="headerlink" title="读取进程输出到字符串"></a>读取进程输出到字符串</h1><p>读进程输出和读文件类似。</p><p>上边字符串相关的处理，直接把 <code>$(&lt;test.txt)</code> 换成 <code>$(命令)</code> 即可。如果一定需要一个文件名，可以这样。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回 fd 路径，优先使用，但某些场景会出错</span></span><br><span class="line">% <span class="built_in">wc</span> -l &lt;(ps)</span><br><span class="line">4 /proc/self/fd/11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时文件，会自动删除，适合上边用法出错的情况</span></span><br><span class="line">% <span class="built_in">wc</span> -l =(ps)</span><br><span class="line">3 /tmp/zshMWDpqD</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/goreliu/zshguide/">zsh开发指南</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;   zsh 的字符串处理功能，要比绝大多数编程语言自带的字符串函数库或者类库要强大（在不依赖外部命令的情况）。同时各种用法也比较怪异，很多时候简洁性和可读性是有矛盾的，很难兼顾。而 shell 的使用场景决定简洁性是不能被牺牲掉的，即使用 Python 这样比较简洁的语言来处理字符串，很多时候也只能写出冗长的代码，而 zsh 经常可以一行搞定（可能有人想到了 Perl，Perl 在处理文本方面确实有比较明显的优势，但使用 Perl 的话也要承担更多的成本），如果再加上适当地使用外部命令，基本可以应付大多数字符串处理场景。因为字符串处理的内容比较丰富，我会分多篇文章写。本篇只涉及最基础和常用的字符串操作，包括字符串的拼接、切片、截断、查找、遍历、替换、匹配、大小写转换、分隔等等。&lt;/p&gt;
&lt;h1 id=&quot;字符串长度&quot;&gt;&lt;a href=&quot;#字符串长度&quot; class=&quot;headerlink&quot; title=&quot;字符串长度&quot;&gt;&lt;/a&gt;字符串长度&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=abcde&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$#str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 读取函数或者脚本的第一个参数的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$#1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;字符串拼接&quot;&gt;&lt;a href=&quot;#字符串拼接&quot; class=&quot;headerlink&quot; title=&quot;字符串拼接&quot;&gt;&lt;/a&gt;字符串拼接&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str1=abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str2=def&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str2+=&lt;span class=&quot;variable&quot;&gt;$str1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defabc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str3=$str1&lt;span class=&quot;variable&quot;&gt;$str2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abcdefabc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;字符串切片&quot;&gt;&lt;a href=&quot;#字符串切片&quot; class=&quot;headerlink&quot; title=&quot;字符串切片&quot;&gt;&lt;/a&gt;字符串切片&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=abcdef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[2,-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bcdef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# $1 是文件或者函数的第一个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;1[2,4]&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;字符串切片还有另一种风格的方法，即 bash 风格，功能大同小异。通常没有必要用这个，而且因为字符位置是从 0 开始算，容易混淆。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=abcdef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;str:1:3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;str:1:-1&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bcde&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;字符串截断&quot;&gt;&lt;a href=&quot;#字符串截断&quot; class=&quot;headerlink&quot; title=&quot;字符串截断&quot;&gt;&lt;/a&gt;字符串截断&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=abcdeabcde&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除左端匹配到的内容，最小匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;str#*b&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cdeabcde&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除右端匹配到的内容，最小匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;str%d*&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abcdeabc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除左端匹配到的内容，最大匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;str##*b&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cde&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除右端匹配到的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;str%%d*&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;字符串查找&quot;&gt;&lt;a href=&quot;#字符串查找&quot; class=&quot;headerlink&quot; title=&quot;字符串查找&quot;&gt;&lt;/a&gt;字符串查找&lt;/h1&gt;&lt;p&gt;子字符串定位。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=abcdef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 这里用的是 i 的大写，不是 L 的小写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[(I)&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# I 是从右往左找，如果找不到则为 0, 方便用来判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% ((&lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[(I)cd])) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 找不到则为 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[(I)cdd]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 也可以使用小 i，小 i 是从左往右找，找不到则返回数组大小 + 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[(i)&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[(i)cdd]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;遍历字符&quot;&gt;&lt;a href=&quot;#遍历字符&quot; class=&quot;headerlink&quot; title=&quot;遍历字符&quot;&gt;&lt;/a&gt;遍历字符&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=abcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i (&amp;#123;1..&lt;span class=&quot;variable&quot;&gt;$#str&lt;/span&gt;&amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;字符串替换&quot;&gt;&lt;a href=&quot;#字符串替换&quot; class=&quot;headerlink&quot; title=&quot;字符串替换&quot;&gt;&lt;/a&gt;字符串替换&lt;/h1&gt;&lt;p&gt;按内容替换和删除字符。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% str=abcdefg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 一对一地替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str[2]=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1cdefg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可以多对多（也包括一对多和多对一）地替换字符，两边的字符数量不需要一致。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 把第二、三个字符替换成 2345&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str[2,3]=2345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a2345defg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="zsh" scheme="http://kennethfan.github.io/tags/zsh/"/>
    
    <category term="shell" scheme="http://kennethfan.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>zsh-变量和语句</title>
    <link href="http://kennethfan.github.io/2017/09/20/zsh-%E5%8F%98%E9%87%8F%E5%92%8C%E8%AF%AD%E5%8F%A5/"/>
    <id>http://kennethfan.github.io/2017/09/20/zsh-%E5%8F%98%E9%87%8F%E5%92%8C%E8%AF%AD%E5%8F%A5/</id>
    <published>2017-09-20T12:32:35.000Z</published>
    <updated>2017-09-20T14:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="格式约定"><a href="#格式约定" class="headerlink" title="格式约定"></a>格式约定</h1><p>文中行首的 <code>%</code> 代表 zsh 的命令提示符（类似 bash 的 <code>$</code>，这个是可以自由定义的，具体是什么不重要），行首的 <code>&gt;</code> 代表此行是换行后的输入内容，以 <code>#</code> 开头的为注释（非 root 用户的命令提示符，本系列文章不需要 root 用户），其余的是命令的输出内容。另外某些地方会贴成段的 zsh 代码，那样就省略开头的 <code>%</code>，比较容易分辨。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>接触一门新的编程语言，运行完 Hello World 后，首先要了解的基本就是如何定义和使用变量了。有了变量后可以比较变量内容，进而可以接触条件、循环、分支等语句，继而了解函数的用法，更高级的数据结构的使用，更多库函数，等等。这样就大概了解了一门面向过程的语言的基本用法，剩下的可以等到用的时候再查手册。</p><p>所以这一篇讲最基本的变量和语句。</p><p>zsh 有 5 种变量：整数、浮点数（bash 不支持）、字符串、数组、哈希表（或者叫关联数组或者字典，本系列文章统一使用“哈希表”这一名词），另外还有一些其他语言少有的东西，比如 alias（但主要是交互时使用，编程时基本用不到）。此篇只涉及整数、浮点数、字符串，并且不涉及数值计算和字符串处理等内容。</p><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>Zsh 的变量多数情况不需要提前声明或者指定类型，可以直接赋值和使用（但哈希表是一个例外）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等号两端不能有空格</span></span><br><span class="line">% num1=123</span><br><span class="line">% num2=123.456</span><br><span class="line">% str1=abcde</span><br><span class="line"><span class="comment"># 如果字符串中包含空格等特殊字符，需要加引号</span></span><br><span class="line">% str2=<span class="string">&#x27;abc def&#x27;</span></span><br><span class="line"><span class="comment"># 也可以用双引号，但和单引号有区别，比如双引号里可以使用变量，而单引号不可以</span></span><br><span class="line">% str3=<span class="string">&quot;abc def <span class="variable">$num1</span>&quot;</span></span><br><span class="line"><span class="comment"># 在字符串中可以使用转义字符，单双引号均可</span></span><br><span class="line">% str4=<span class="string">&quot;abc\tdef\ng&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出变量，也可以使用 print</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str1</span></span><br><span class="line">abcde</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单的数值计算</span></span><br><span class="line">% num3=$((<span class="variable">$num1</span> + <span class="variable">$num2</span>))</span><br><span class="line"><span class="comment"># (( 中的变量名可以不用 $</span></span><br><span class="line">% num3=$((num1 + num2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单的字符串操作</span></span><br><span class="line">% str=abcdef</span><br><span class="line"><span class="comment"># 2 和 4 都是字符在数组的位置，从 1 开始数，逗号两边不能有空格</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[2,4]</span><br><span class="line">bcd</span><br><span class="line"><span class="comment"># -1 是最后一个字符</span></span><br><span class="line">% <span class="built_in">echo</span> <span class="variable">$str</span>[4,-1]</span><br><span class="line">def</span><br></pre></td></tr></table></figure><h2 id="变量比较"><a href="#变量比较" class="headerlink" title="变量比较"></a>变量比较</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较数值</span></span><br><span class="line">% num=123</span><br><span class="line"><span class="comment"># (( )) 用于数值比较等操作，如果为真返回 0，否则返回 1</span></span><br><span class="line"><span class="comment"># &amp;&amp; 后边的语句在前边的语句为真时才执行</span></span><br><span class="line"><span class="comment"># 注意这里只能使用双等号来比较</span></span><br><span class="line">% ((num == <span class="number">123</span>)) &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"><span class="comment"># (( 里边可以使用与（&amp;&amp;）或（||）非（!）操作符，同 c 系列语言</span></span><br><span class="line">% ((num == <span class="number">1</span> || num == <span class="number">2</span>)) &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较字符串</span></span><br><span class="line">% str=abc</span><br><span class="line"><span class="comment"># 比较字符串要用 [[，内侧要有空格，[[ 的具体用法之后会讲到</span></span><br><span class="line"><span class="comment"># 这里双等号可以替换成单等号，可以根据自己的习惯选用</span></span><br><span class="line"><span class="comment"># 本系列文章统一使用双等号，因为和 (( )) 一致，并且使用双等号的常用编程语言更多些</span></span><br><span class="line"><span class="comment"># $str 两侧不需要加双引号，即使 str 未定义或者 $str 中含空格和特殊符号</span></span><br><span class="line">% [[ <span class="variable">$str</span> == abc ]] &amp;&amp; <span class="built_in">echo</span> good</span><br><span class="line">good</span><br><span class="line"><span class="comment"># 可以和空字符串 &quot;&quot; 比较，未定义的字符串和空字符串比较结果为真</span></span><br><span class="line"><span class="comment"># [[ 里也可以用 &amp;&amp; || !</span></span><br><span class="line">% [[ <span class="variable">$str</span> == <span class="string">&quot;&quot;</span> || <span class="variable">$str</span> == 123 ]] &amp;&amp; <span class="built_in">echo</span> good</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><p>稍微了解下简单变量的使用后，快速进入语句部分。</p><p>zsh 支持多种风格的语法，包括经典的 posix sh （bash 的语法和它类似，但有一些扩展，可以归为一类）的，以及 csh 风格的等等。但 posix sh 的语法并不好用，我们没必要一定使用这个。我只选用一种我认为最方便简洁的语法，没有 <code>fi</code>、<code>then</code>、<code>do</code>、<code>done</code>、<code>esac</code>、<code>in</code> 等的关键字（虽然其中某些关键字其他编程语言也有，但基本用法都各异，而且容易混淆），也不需要多余的分号。如果不确定语法是否符合预期，可以定义一个函数然后使用 <code>which</code> 查看，内容会被转化成原始（posix sh 风格）的样子。熟悉 bash 并且喜欢使用 bash 语法的读者可以跳过这部分内容，语法的不同并不影响后续内容的阅读，继续使用 bash 风格语法写 zsh 也是没有问题的。</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">if</span> [[ ]] &#123;</span><br><span class="line">&#125; <span class="keyword">elif</span> &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大括号也可以另起一行，本系列文章统一使用这种风格，缩进为 4 个空格。注意 <code>elif</code> 不可写作 <code>else if</code>。</p><p><code>[[ ]]</code> 用于比较字符串、判断文件等，功能比较复杂多样，这里先使用最基础的用法。注意尽量不要用 <code>[[ ]]</code> 比较数值，因为不留神的话，数值会被转化成字符串来比较，没有任何错误提示，但结果可能不符合预期，导致不必要的麻烦。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$str</span>&quot;</span> == <span class="string">&quot;name&quot;</span> || <span class="string">&quot;<span class="variable">$str</span>&quot;</span> == <span class="string">&quot;value&quot;</span> ]] &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$str</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(( ))</code> 用于比较数值，里边可以调用各种数值相关的函数，格式类似 c 语言，变量前的 <code>$</code> 可省略。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">if</span> (( )) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例</span></span><br><span class="line"><span class="keyword">if</span> ((num &gt; <span class="number">3</span> &amp;&amp; num + <span class="number">3</span> &lt; <span class="number">10</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&#123; &#125;</code> 用于在当前 sh 运行命令并且判断运行结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">if</span> &#123; &#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例</span></span><br><span class="line"><span class="keyword">if</span> &#123;grep sd1 /etc/fstab&#125; &#123;</span><br><span class="line">    <span class="built_in">echo</span> good</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>( )</code> 用于在子 sh 运行命令并且判断运行结果，用法和 {} 类似，不再举例。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="function"><span class="title">if</span></span> ( ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几种括号可以一起使用，这样可以同时判断字符串、数值、文件、命令结果等等。最好不要混合使用 <code>&amp;&amp;</code> <code>||</code>，会导致可读性变差和容易出错。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">if</span> [[ ]] &amp;&amp; (( )) &amp;&amp; &#123; &#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">while</span> [[ ]] &#123;</span><br><span class="line">    <span class="built_in">break</span>/continue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 <code>if</code> 一样，这里的 <code>[[ ]]</code> 可以替换成其他几种括号，功能也是一样的，不再依次举例。<code>break</code> 用于结束循环，<code>continue</code>用于直接进入下一次循环。所有的循环语句中都可以使用 <code>break</code> 和 <code>continue</code>，下边不再赘述。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例 死循环</span></span><br><span class="line"> <span class="keyword">while</span> ((<span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> good</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>until</code> 和 <code>while</code> 相反，不满足条件时运行，一旦满足则停止，其他的用法和 <code>while</code> 相同，不再举例。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">until</span> [[ ]] &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code> 循环主要用于枚举，这里的括号是 <code>for</code> 的特有用法，不是在子 sh 执行。括号内是字符串（可放多个，空格隔开）、数组（可放多个）或者哈希表（可放多个，哈希表是枚举值而不是键）。<code>i</code> 是用于枚举内容的变量名，变量名随意。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">for</span> <span class="function"><span class="title">i</span></span> ( ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例</span></span><br><span class="line"><span class="keyword">for</span> i (aa bb cc) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举当前目录的 txt 文件</span></span><br><span class="line"><span class="keyword">for</span> i (*.txt) &#123; </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举数组</span></span><br><span class="line">array=(aa bb cc)</span><br><span class="line"><span class="keyword">for</span> i (<span class="variable">$array</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典的 c 风格 <code>for</code> 循环。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">for</span> (( ; ; )) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个样例只是举例，实际上多数情况不需要使用这种 <code>for</code> 循环，可以这样。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例，&#123;1..10&#125; 可以生成一个 1 到 10 的数组</span></span><br><span class="line"><span class="keyword">for</span> i (&#123;1..10&#125;) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>repeat</code> 语句用于循环固定次数，<code>n</code> 是一个整数或者内容为整数的变量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">repeat n &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例</span></span><br><span class="line">repeat 5 &#123;</span><br><span class="line">    <span class="built_in">echo</span> good</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>分支逻辑用 <code>if</code> 也可以实现，但 <code>case</code> 更适合这种场景，并且功能更强大。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式 + 样例</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$i</span> &#123;</span><br><span class="line">    (a)</span><br><span class="line">    <span class="built_in">echo</span> 1</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    (b)</span><br><span class="line">    <span class="built_in">echo</span> 2</span><br><span class="line">    <span class="comment"># 继续执行下一个</span></span><br><span class="line">    ;&amp;</span><br><span class="line"></span><br><span class="line">    (c)</span><br><span class="line">    <span class="built_in">echo</span> 3</span><br><span class="line">    <span class="comment"># 继续向下匹配</span></span><br><span class="line">    ;|</span><br><span class="line"></span><br><span class="line">    (c)</span><br><span class="line">    <span class="built_in">echo</span> 33</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    (d)</span><br><span class="line">    <span class="built_in">echo</span> 4</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    (*)</span><br><span class="line">    <span class="built_in">echo</span> other</span><br><span class="line">    ;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>;;</code> 代表结束 <code>case</code> 语句，<code>;&amp;</code> 代表继续执行紧接着的下一个匹配的语句（不再进行匹配），<code>;|</code> 代表继续往下匹配看是否有满足条件的分支。</p><h2 id="用户输入选择语句"><a href="#用户输入选择语句" class="headerlink" title="用户输入选择语句"></a>用户输入选择语句</h2><p><code>select</code> 语句是用于根据用户的选择决定分支的语句，语法和 <code>for</code> 语句差不多，如果不 <code>break</code>，会循环让用户选择。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="keyword">select</span> <span class="function"><span class="title">i</span></span> ( ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 样例</span></span><br><span class="line"><span class="keyword">select</span> i (aa bb cc) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是这样的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1) aa  2) bb  3) cc</span><br><span class="line">?<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>按上边的数字加回车来选择。</p><h2 id="异常处理语句"><a href="#异常处理语句" class="headerlink" title="异常处理语句"></a>异常处理语句</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">&#123;</span><br><span class="line">    语句 1</span><br><span class="line">&#125; always &#123;</span><br><span class="line">    语句 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果语句 1 执行出错，则执行语句 2。</p><h2 id="简化的条件语句"><a href="#简化的条件语句" class="headerlink" title="简化的条件语句"></a>简化的条件语句</h2><p><code>if</code> 语句的简化版，在只有一个分支的情况下更简洁，功能和 <code>if</code> 语句类似，不赘述</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">[[ ]] || &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[ ]] &amp;&amp; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好不要连续混合使用 <code>&amp;&amp;</code> <code>||</code>，比如。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aa &amp;&amp; bb || cc &amp;&amp; <span class="built_in">dd</span></span><br></pre></td></tr></table></figure><p>容易导致逻辑错误或者误解，可以用 <code>&#123; &#125;</code> 把语句包含起来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aa &amp;&amp; &#123; bb || &#123; cc &amp;&amp; <span class="built_in">dd</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>比较复杂的判断还是用 <code>if</code> 可读写更好，<code>&amp;&amp;</code> <code>||</code> 通常只适用于简单的场景。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/goreliu/zshguide">zsh-开发指南</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;格式约定&quot;&gt;&lt;a href=&quot;#格式约定&quot; class=&quot;headerlink&quot; title=&quot;格式约定&quot;&gt;&lt;/a&gt;格式约定&lt;/h1&gt;&lt;p&gt;文中行首的 &lt;code&gt;%&lt;/code&gt; 代表 zsh 的命令提示符（类似 bash 的 &lt;code&gt;$&lt;/code&gt;，这个是可以自由定义的，具体是什么不重要），行首的 &lt;code&gt;&amp;gt;&lt;/code&gt; 代表此行是换行后的输入内容，以 &lt;code&gt;#&lt;/code&gt; 开头的为注释（非 root 用户的命令提示符，本系列文章不需要 root 用户），其余的是命令的输出内容。另外某些地方会贴成段的 zsh 代码，那样就省略开头的 &lt;code&gt;%&lt;/code&gt;，比较容易分辨。&lt;/p&gt;
&lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;p&gt;接触一门新的编程语言，运行完 Hello World 后，首先要了解的基本就是如何定义和使用变量了。有了变量后可以比较变量内容，进而可以接触条件、循环、分支等语句，继而了解函数的用法，更高级的数据结构的使用，更多库函数，等等。这样就大概了解了一门面向过程的语言的基本用法，剩下的可以等到用的时候再查手册。&lt;/p&gt;
&lt;p&gt;所以这一篇讲最基本的变量和语句。&lt;/p&gt;
&lt;p&gt;zsh 有 5 种变量：整数、浮点数（bash 不支持）、字符串、数组、哈希表（或者叫关联数组或者字典，本系列文章统一使用“哈希表”这一名词），另外还有一些其他语言少有的东西，比如 alias（但主要是交互时使用，编程时基本用不到）。此篇只涉及整数、浮点数、字符串，并且不涉及数值计算和字符串处理等内容。&lt;/p&gt;
&lt;h2 id=&quot;变量定义&quot;&gt;&lt;a href=&quot;#变量定义&quot; class=&quot;headerlink&quot; title=&quot;变量定义&quot;&gt;&lt;/a&gt;变量定义&lt;/h2&gt;&lt;p&gt;Zsh 的变量多数情况不需要提前声明或者指定类型，可以直接赋值和使用（但哈希表是一个例外）。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 等号两端不能有空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% num1=123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% num2=123.456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str1=abcde&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果字符串中包含空格等特殊字符，需要加引号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str2=&lt;span class=&quot;string&quot;&gt;&amp;#x27;abc def&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 也可以用双引号，但和单引号有区别，比如双引号里可以使用变量，而单引号不可以&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str3=&lt;span class=&quot;string&quot;&gt;&amp;quot;abc def &lt;span class=&quot;variable&quot;&gt;$num1&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在字符串中可以使用转义字符，单双引号均可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str4=&lt;span class=&quot;string&quot;&gt;&amp;quot;abc&#92;tdef&#92;ng&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出变量，也可以使用 print&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abcde&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 简单的数值计算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% num3=$((&lt;span class=&quot;variable&quot;&gt;$num1&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$num2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# (( 中的变量名可以不用 $&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% num3=$((num1 + num2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 简单的字符串操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str=abcdef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2 和 4 都是字符在数组的位置，从 1 开始数，逗号两边不能有空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -1 是最后一个字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt;[4,-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;变量比较&quot;&gt;&lt;a href=&quot;#变量比较&quot; class=&quot;headerlink&quot; title=&quot;变量比较&quot;&gt;&lt;/a&gt;变量比较&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 比较数值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% num=123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# (( )) 用于数值比较等操作，如果为真返回 0，否则返回 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &amp;amp;&amp;amp; 后边的语句在前边的语句为真时才执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注意这里只能使用双等号来比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% ((num == &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# (( 里边可以使用与（&amp;amp;&amp;amp;）或（||）非（!）操作符，同 c 系列语言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% ((num == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || num == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 比较字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% str=abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 比较字符串要用 [[，内侧要有空格，[[ 的具体用法之后会讲到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 这里双等号可以替换成单等号，可以根据自己的习惯选用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 本系列文章统一使用双等号，因为和 (( )) 一致，并且使用双等号的常用编程语言更多些&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# $str 两侧不需要加双引号，即使 str 未定义或者 $str 中含空格和特殊符号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% [[ &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt; == abc ]] &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可以和空字符串 &amp;quot;&amp;quot; 比较，未定义的字符串和空字符串比较结果为真&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [[ 里也可以用 &amp;amp;&amp;amp; || !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% [[ &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; || &lt;span class=&quot;variable&quot;&gt;$str&lt;/span&gt; == 123 ]] &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; good&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="zsh" scheme="http://kennethfan.github.io/tags/zsh/"/>
    
    <category term="shell" scheme="http://kennethfan.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kennethfan.github.io/2017/06/05/hello-world/"/>
    <id>http://kennethfan.github.io/2017/06/05/hello-world/</id>
    <published>2017-06-05T12:39:46.000Z</published>
    <updated>2017-06-05T12:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP总结</title>
    <link href="http://kennethfan.github.io/2017/06/05/PHP%E6%80%BB%E7%BB%93/"/>
    <id>http://kennethfan.github.io/2017/06/05/PHP%E6%80%BB%E7%BB%93/</id>
    <published>2017-06-05T12:22:06.000Z</published>
    <updated>2017-06-05T12:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="PHP如何实现类自动加载？"><a href="#PHP如何实现类自动加载？" class="headerlink" title="PHP如何实现类自动加载？"></a>PHP如何实现类自动加载？</h2><ul><li>设置自动加载目录 set_include_path(String $path)。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="title function_ invoke__">dirname</span>(__file__) . <span class="string">&#x27;/classes&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>修改php.ini文件include_path选项</li><li>写一个__autoload($class)方法。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>) . <span class="string">&quot;/autoload/<span class="subst">$class</span>.php&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$path</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;class <span class="subst">$class</span> can not load\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$path</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br></pre></td></tr></table></figure></li><li>写一个加载器，然后用spl_autoload_register方法注册。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">DEFINE</span>(<span class="string">&#x27;ROOT_PATH&#x27;</span>, <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Loader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$class</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$class</span>, <span class="number">0</span> - <span class="title function_ invoke__">strlen</span>(<span class="string">&#x27;Controller&#x27;</span>)) == <span class="string">&#x27;Controller&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$path</span> = ROOT_PATH . <span class="string">&#x27;/Controllers/&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$class</span>, <span class="number">0</span> - <span class="title function_ invoke__">strlen</span>(<span class="string">&#x27;Model&#x27;</span>)) == <span class="string">&#x27;Model&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$path</span> = ROOT_PATH . <span class="string">&#x27;/Models/&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$path</span> = ROOT_PATH . <span class="string">&#x27;/Components/&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$path</span> .= <span class="string">&quot;<span class="subst">$class</span>.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>)) &#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="variable">$path</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="keyword">array</span>(<span class="string">&#x27;Loader&#x27;</span>, <span class="string">&#x27;load&#x27;</span>), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$controller</span> = <span class="keyword">new</span> <span class="title class_">AController</span>();</span><br></pre></td></tr></table></figure></li></ul><p>推荐第四种，原因如下</p><p>第一第二种不够灵活</p><p>第三种灵活，但是__autoload只能被重写一次</p><p>第四种相对灵活，而且在引用第三方差价或者工具的时候有非常明显的优势</p><h2 id="include-include-once-require-require-once的区别？"><a href="#include-include-once-require-require-once的区别？" class="headerlink" title="include&#x2F;include_once&#x2F;require&#x2F;require_once的区别？"></a>include&#x2F;include_once&#x2F;require&#x2F;require_once的区别？</h2><p>include在文件不存在的时候会打印警告信息然后继续执行，而require会终止程序，相对来说include效率更高</p><p>include_once和require_once在加载文件之前都会先判断文件是否已经被加载过，相对来说效率低一些</p><span id="more"></span><h2 id="双引号和单引号的区别？"><a href="#双引号和单引号的区别？" class="headerlink" title="双引号和单引号的区别？"></a>双引号和单引号的区别？</h2><p>双引号会尝试解析替换里面的变量，而单引号不会，相对来说单引号效率高</p><p>双引号解释转义字符，而单引号不解释转移字符，比如\n</p><h2 id="常见的超全局变量"><a href="#常见的超全局变量" class="headerlink" title="常见的超全局变量"></a>常见的超全局变量</h2><ul><li>$_GET：获取GET参数</li><li>$_POST：获取POST参数</li><li>$_REQUEST：可以接收到get和post两种方式的值</li><li>$_SESSION：</li><li>$_COOKIE：</li><li>$_FILE：上传文件的时候用到</li><li>$_SERVER：系统环境变量</li><li>$GLOBALS：所有的变量都可以在这里获取</li></ul><h2 id="全局变量怎么获取？"><a href="#全局变量怎么获取？" class="headerlink" title="全局变量怎么获取？"></a>全局变量怎么获取？</h2><ul><li>从$_GLOBALS数组里面取</li><li>global + 变量名</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">g1</span>();</span><br><span class="line"><span class="title function_ invoke__">g2</span>();</span><br></pre></td></tr></table></figure><h2 id="PHP的几种魔术方法？"><a href="#PHP的几种魔术方法？" class="headerlink" title="PHP的几种魔术方法？"></a>PHP的几种魔术方法？</h2><ul><li>__construct()：构造方法，new一个对象的时候调用</li><li>__destruct()：析构方法，对象销毁的时候调用，通常一个资源的释放放在这里面</li><li>__clone()：定义如何克隆一个对象</li><li>__set($name, $value)：尝试赋值一个不可访问的属性时被调用</li><li>__get($name)：尝试获取一个不存在的属性时被调用</li><li>__isset($name)：在对一个不可访问的属性调用isset()方法时会被调用</li><li>__unset($name)：在调用unset()函数销毁一个不能访问的属性时会被调用</li><li>__sleep()：对象被序列化时调用</li><li>__wakeup()：对象被反序列化时调用</li><li>__toString()：定义对象的字符串表示，echo，print一个对象时自动调用</li><li>__call($method, $arguments)：调用不存在或不可访问的方法时会被调用</li><li>__callStatic($method, $arguments)：调用不存在或不可访问的静态方法时会被调用</li><li>__invoke()：在尝试将对象作为函数使用时会被调用</li></ul><h2 id="自定义错误日志级别"><a href="#自定义错误日志级别" class="headerlink" title="自定义错误日志级别"></a>自定义错误日志级别</h2><p>error_reporting方法</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>自定义一个class，继承系统系统的Exception</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&#x27;MyException&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="自定义错误处理"><a href="#自定义错误处理" class="headerlink" title="自定义错误处理"></a>自定义错误处理</h2><p>通过set_error_handler设置自定义的错误处理，通常用来做一些日志记录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;error <span class="subst">$errstr</span> [<span class="subst">$errno</span>] triggered in <span class="subst">$errfile</span> line [<span class="subst">$errline</span>];\n&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(<span class="keyword">array</span>(<span class="string">&#x27;ErrorHandler&#x27;</span>, <span class="string">&#x27;error&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">trigger_error</span>(<span class="string">&#x27;test error&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h2><p>通过set_exception_handler自定一个异常处理器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"><span class="variable">$exception</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">get_class</span>(<span class="variable">$exception</span>), <span class="string">&quot;: &quot;</span>, <span class="variable">$exception</span>-&gt;<span class="title function_ invoke__">getMessage</span>(), <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">debug_print_backtrace</span>();</span><br><span class="line">        <span class="keyword">die</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_exception_handler</span>(<span class="keyword">array</span>(<span class="string">&#x27;ExceptionHandler&#x27;</span>, <span class="string">&#x27;handler&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;test exception&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="什么是魔术引号"><a href="#什么是魔术引号" class="headerlink" title="什么是魔术引号"></a>什么是魔术引号</h2><p>magic_quotes_gpc，自动转义引号，不建议开启，在业务需要的时候去做即可；</p><p>可以通过set_magic_quotes_runtime设置，get_magic_quotes_runtime获取配置。</p><h2 id="方法前面加-和不加的区别"><a href="#方法前面加-和不加的区别" class="headerlink" title="方法前面加@和不加的区别"></a>方法前面加@和不加的区别</h2><p>方法前面加@会抑制错的打印，性能会有影响，不建议使用，应该在开发阶段尽量的把错误暴露出来。</p><h2 id="传值和传引用"><a href="#传值和传引用" class="headerlink" title="传值和传引用"></a>传值和传引用</h2><p>一般变量作为参数时通常都是传值，对象作为参数时是传引用；传引用函数修改变量时，外部变量会同步修改，传引用本质上是传递的内存地址</p><h2 id="PHP内存回收机制"><a href="#PHP内存回收机制" class="headerlink" title="PHP内存回收机制"></a>PHP内存回收机制</h2><p>php内存回收是通过引用计数来操作的，变量被初始化时会有一个引用次数，变量没被使用一次，引用计数加1，当引用计数为0时就可以被回收</p><h1 id="协议篇"><a href="#协议篇" class="headerlink" title="协议篇"></a>协议篇</h1><h2 id="http常见的响应码"><a href="#http常见的响应码" class="headerlink" title="http常见的响应码"></a>http常见的响应码</h2><p>200：成功</p><p>301：永久重定向</p><p>302：临时重定向</p><p>401：未授权，通常是身份验证失败</p><p>403：资源禁止访问，通常是用户验证通过了，但是没有对应权限</p><p>404：资源不存在</p><p>500：内部错误，通常是php执行出错，一般通过日志文件可以找到原因</p><p>502：网关错误，通常是php执行时间过长</p><p>503：服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。（服务不可用）</p><p>504：网关超时，通常是反向代理后面的服务挂了，nginx连不上内部服务</p><h2 id="GET方法和POST方法区别"><a href="#GET方法和POST方法区别" class="headerlink" title="GET方法和POST方法区别"></a>GET方法和POST方法区别</h2><ul><li>语义上来说，GET表示获取一个资源，POST通常表示创建一个资源</li><li>URL上来说，GET请求参数都在URL上，POST请求参数多在请求体(body)里，相对来说POST请求更安全</li><li>通常来说，GET请求和通过刷新重复访问，而POST请求不可以（chrome可以支持刷新再次访问，对于开发者来说也是坑，无意中多写了一条数据到数据库）</li><li>长度限制，各家浏览器对于URL的长度都是有限制，通常1024字节；GET请求的参数室友限制的，理论上来说POST请求的参数是没有限制的</li></ul><h2 id="REST-RESTFUL接口是什么意思？"><a href="#REST-RESTFUL接口是什么意思？" class="headerlink" title="REST&#x2F;RESTFUL接口是什么意思？"></a>REST&#x2F;RESTFUL接口是什么意思？</h2><p>REST是参照了HTTP协议的初衷来设计的方式，即把所有的数据看做一个个的资源，把对数据的CRUD看做对资源的查看&#x2F;创建&#x2F;修改&#x2F;删除，对应HTTP的GET&#x2F;POST&#x2F;PUT&#x2F;DELETE方法；从语义上来说更加清晰，适用于比较简单的业务或者逻辑紧凑，高内聚的业务</p><p>比如以新闻为例来设计接口</p><p>&#x2F;api&#x2F;news：GET方法，表示获取新闻列表，返回数据格式是一个list</p><p>&#x2F;api&#x2F;news&#x2F;1：GET方法，表示获取信id&#x3D;1的新闻详情，返回数据格式是一个dict&#x2F;object</p><p>&#x2F;api&#x2F;news&#x2F;：POST方法，表示创建一条新闻，返回数据格式是一个dict&#x2F;object，包含新闻id</p><p>&#x2F;api&#x2F;news&#x2F;1：PUT方法，表示修改id&#x3D;1的新闻信息，返回格式是一个dict&#x2F;object</p><p>&#x2F;api&#x2F;news&#x2F;1：DELETE方法：表示删除id&#x3D;1的新闻信息，可以不返回body部分</p><h2 id="session和cookie的区别和联系？"><a href="#session和cookie的区别和联系？" class="headerlink" title="session和cookie的区别和联系？"></a>session和cookie的区别和联系？</h2><ul><li>存储上说session存在服务端，cookie存在客户端；时间上来说cookie的有效期比session长；安全性上说session相对cookie安全。</li><li>session是会话相关的，会话没了（比如浏览器被关了），session也就不存在了。</li><li>session依靠cookie，因为session的识别是通过cookie传过来的（通常key是PHPSESSIONID），浏览器禁用了cookie，session也就没法识别了</li></ul><p>建议重要信息和敏感信息都放在session，不重要的放到cookie</p><h2 id="cookie的格式，有效期，访问权限控制"><a href="#cookie的格式，有效期，访问权限控制" class="headerlink" title="cookie的格式，有效期，访问权限控制"></a>cookie的格式，有效期，访问权限控制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key1=value1; key2=value2; 过期时间; 路径; 域名</span><br></pre></td></tr></table></figure><p>过期时间，路劲，和域都不是必须的；默认是根路径（&#x2F;）；默认域名是当前域名</p><p>子域名（pan.baidu.com）可以访问父域名(.baidu.com)的下cookie，反过来不行</p><p>通过set_cookie或者header方法可以设置cookie。</p><h2 id="跨域限制如何解决？"><a href="#跨域限制如何解决？" class="headerlink" title="跨域限制如何解决？"></a>跨域限制如何解决？</h2><ul><li>异步处理可以使用ajax + jsonp搞定</li><li>p3p协议授权</li></ul><h2 id="TCP的三次握手和4次挥手协议"><a href="#TCP的三次握手和4次挥手协议" class="headerlink" title="TCP的三次握手和4次挥手协议"></a>TCP的三次握手和4次挥手协议</h2><p><a href="http://blog.csdn.net/whuslei/article/details/6667471/">http://blog.csdn.net/whuslei/article/details/6667471/</a></p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>客户端发送SYN</p><p>服务端收到SYN：此时服务端知道客户端可以正常发送数据包，同时也知道服务端可以正常接收数据包</p><p>服务端发送SYN + ACK：</p><p>客户端收到SYN + ACK: 此时客户端知道自己可正常发送和接收数据包，同时知道服务端也可以正常发送和接收数据包（为什么？因为服务端收到了SYN才会给客户端发送SYN+ACK）</p><p>客户端发送ACK：</p><p>服务端接收ACK：此时服务端知道客户端可以正常接收数据包（为什么？客户端收到了SYN+ACK之后才会给服务端发送ACK）</p><p><em><strong>注意</strong></em>：三次握手不保证传输可靠性（不丢包），只是确保了双方都可以正常接收和发送数据包；至于不丢包是通过超时重传保证的</p><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><p>发送方每次发送数据包的时候，都会带上一个随机数，接收方收到数据之后会回应一个响应包（ack），然后加上一个数字（之前的随机数+1），发送方收到ack之后就知道接接收方已经收到数据包了，如果超过一定时间没有收到ack，发送方就认为数据包丢了，会再发一次数据包；所以接收方在理论上可能接到统一份数据包多次，需要做去重处理（系统已经做了）</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ul><li>客户端发送关闭请求（FIN）：我该发的数据发完了，我准备关闭了</li><li>服务端回应ACK：行，我知道了，但是我数据还没传完，你等等再关</li><li>服务端发送关闭请求（FIN）：我数据传完了，你可以关闭了</li><li>客户端发送ACK：好的，我过会儿就自动关了哈</li><li>服务端收到ACK：</li></ul><p>需要四次挥手的原因主要是因为需要确认双方的数据都发送完了才能关闭；所以双方在发送关闭请求之后会有两次确认，一次确认收到了对方的关闭请求，一次确认数据发送完了。</p><h3 id="客户端状态变化"><a href="#客户端状态变化" class="headerlink" title="客户端状态变化"></a>客户端状态变化</h3><p>CLOSED：关闭状态（初始状态）</p><p>SYN_SEND：刚刚发送SYN，准备建立链接</p><p>ESTABLISHED：收到了SYN+ACK，此时客户端发送完ACK就可以发送数据包了</p><p>FIN-WAIT1：发送完FIN，准备关闭链接</p><p>FIN-WAIT2：收到服务端的ACK，服务端已经收到了关闭请求，但是数据还没有传输完</p><p>TIME-WAIT：收到了服务端的FIN，表示服务端数据传完了，发送完ACK等待一段时间就可以关闭了</p><h3 id="服务端状态变化"><a href="#服务端状态变化" class="headerlink" title="服务端状态变化"></a>服务端状态变化</h3><p>LISTEN：监听状态（初始状态）</p><p>SYN_RCVD：收到了客户端SYN包，需要准备建立连接了</p><p>ESTABLISHED：收到了客户端ACK包，准备收发数据了</p><p>CLOSE-WAIT：收到了客户端FIN包，客户端数据传完了</p><p>LAST-ACK：服务端数据传输完了，发送ACK通知客户端</p><p>CLOSE：客户端收到了FIN，并且ACK了，服务端关闭连接</p><p>如何查看服务器上的tcp链接</p><p>netstat命令：<a href="http://man.linuxde.net/netstat">http://man.linuxde.net/netstat</a></p><h2 id="HTTPS和HTTP的区别"><a href="#HTTPS和HTTP的区别" class="headerlink" title="HTTPS和HTTP的区别"></a>HTTPS和HTTP的区别</h2><p><a href="http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html">http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a></p><p>HTTPS&#x3D;HTTP + SSL&#x2F;TLS</p><p>本质上就是HTTP协议，只不过在开始之前会有一次握手协商加密密钥</p><p>服务器配置的证书只是为了加密传输最后一个随机数，因为是从客户端往服务端发的，且服务端持有的是私钥，所以被破解的概率很小；因为最后一个随机数被破解的概率小，所以也就保证了整个会话过程密钥被破解的概率很小；同时每次会话都会生成不同的密钥，所以暴力破解的希望也不大。</p><h1 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h1><h2 id="MyISAM和InnoDB的区别"><a href="#MyISAM和InnoDB的区别" class="headerlink" title="MyISAM和InnoDB的区别"></a>MyISAM和InnoDB的区别</h2><p>MyISAM：不支持事务；表级锁；索引和数据存放在一起；数据恢复相对困难；查询相对快。</p><p>InnoDB：支持事务；行级锁，索引和数据分开存放；数据恢复相对简单；查询相对慢。</p><p>一般来说现在说的都是InnoDB存储引擎</p><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>B+Tree：最常见的索引结构，默认说的索引就是B+数索引</p><p>Hash索引：从名字就可以看出来，索引算法是hash算法，只适用于等值查询(a &#x3D; ‘xxxxxx’)，对于范围查询不适用</p><h2 id="索引创建的一些原则"><a href="#索引创建的一些原则" class="headerlink" title="索引创建的一些原则"></a>索引创建的一些原则</h2><ul><li>区分度越来越好；根据索引查询时扫描的行数少</li><li>索引长度越短越好；单页存储的索引数据多，IO次数少</li><li>索引越简单越好；数字索引比字符串索引好</li><li>查询使用多的列加索引</li><li>排序用到的列加索引</li><li>索引不是越多越好；索引也占据磁盘空间，写入的时候构建索引也耗时</li></ul><h2 id="如何查看sql语句性能"><a href="#如何查看sql语句性能" class="headerlink" title="如何查看sql语句性能"></a>如何查看sql语句性能</h2><p>使用explain</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> c <span class="keyword">from</span> t <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: NULL</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: NULL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: NULL</span><br><span class="line">     filtered: NULL</span><br><span class="line">        Extra: no matching row in const table</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>关注的列</p><ul><li>type</li><li>key：使用到的索引</li><li>key_len：索引长度</li><li>rows：预计扫描行数</li><li>extra：查看是否使用文件排序，临时表之类的</li></ul><h2 id="如何找到查询比较慢的sql"><a href="#如何找到查询比较慢的sql" class="headerlink" title="如何找到查询比较慢的sql"></a>如何找到查询比较慢的sql</h2><ul><li>通过mysql慢查询日志查看</li><li>写完sql explain看下性能</li></ul><h2 id="什么情况下索引无效"><a href="#什么情况下索引无效" class="headerlink" title="什么情况下索引无效"></a>什么情况下索引无效</h2><ul><li><p>通过索引扫描行数大于总数据20%时不会走索引；走索引会大量随机IO，性能可能不如全表扫描走顺序IO效率高</p></li><li><p>最左前缀匹配原则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index `idx_xxx` (`a`, `b`, `c`);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>会用到索引的所有部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>会用到索引的a部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>不会用到索引</p></li></ul><h2 id="数据库隔离级别什么意思？"><a href="#数据库隔离级别什么意思？" class="headerlink" title="数据库隔离级别什么意思？"></a>数据库隔离级别什么意思？</h2><p>mysql做到了RR级别<br><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&mid=2665513435&idx=1&sn=41ffb114be4a5b53de87831b9c8427bf&chksm=80d67998b7a1f08e1b1187915609ecc43715151b015ac156ce5a9645e654910cdda1d48d5883&mpshare=1&scene=1&srcid=06023qmtatDjl2iUrO9YjeUw&key=7dffde877c8eec6a2f4bcfbae75c619b4add5dfa71357aa804b426737c57081f21daff3d1e925dc6eebd3424cdd0e92f1e314c867cd1e2987aa6f2292875952e582abf0ab35de6e98869a7c8a2e82009&ascene=0&uin=OTkyNDg2MDgx&devicetype=iMac+MacBookPro11,2+OSX+OSX+10.12.4+build(16E195)&version=12020510&nettype=WIFI&fontScale=100&pass_ticket=Vp76quG8JQIgm40HO1JQshMZuSEvKCAkEKOsSnlTetkRzpT2f3QD/kM0eHVx8DKT">微信上一篇讲隔离级别比较好的文章</a></p><h1 id="缓存篇"><a href="#缓存篇" class="headerlink" title="缓存篇"></a>缓存篇</h1><h2 id="memcache"><a href="#memcache" class="headerlink" title="memcache"></a>memcache</h2><ul><li>纯内存数据，无法备灾</li><li>不支持主从结构</li><li>淘汰算法：LRU</li><li>简单kv结构：</li><li>slab chunk机制：memcache会把内存划分成不同的slab，每个slab由大小相同的多个chunk组成，不同的slab chunk大小不一致；比如128B的一堆chunk组成一个slab，256B的chunk组成另一chunk，chunk的增长因子默认是2，可以通过参数调整；比如一个大小为98B的数据过来，memcache会选择一个最小的能容下数据的chunk(128b)来存储，当一个大小为130的过来，memcache会选择256的chunk来存储，所以memcache会有很多的碎片：一个slab可能有剩余的空间不足一个chunk；一个chunk内因为数据太小不够一个chunk也有碎片；所以需要根据实际需要划分好chunk和增长因子</li></ul><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ul><li><p>非纯内存结构，直接持久化到磁盘：两种形式，RDB(快照)，或者AOF(写请求日志)，数据恢复时优先选择AOF，类似mysql binlog</p></li><li><p>支持主从结构：全量同步&#x2F;增量同步，全量同步步骤</p><ul><li>1、从连主，发送sync命令</li><li>2、主bgsave生成快照</li><li>3、发送快照</li><li>4、从load快照</li><li>5、主发送增加写命令</li></ul><p>增量同步只发送写命令即可</p></li><li><p>数据结构丰富：kv、list、map、set…</p></li></ul><h1 id="队列篇"><a href="#队列篇" class="headerlink" title="队列篇"></a>队列篇</h1><h2 id="beanstalkd"><a href="#beanstalkd" class="headerlink" title="beanstalkd"></a>beanstalkd</h2><ul><li>producer、consumer、tube、job</li><li>纯内存，不支持集群，无备灾</li></ul><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><ul><li>producer、consumer、consumer group、broker、partition、offset</li><li>partition 分段存储，多个segment file，只有flush 到磁盘的数据才能被消费</li><li>高可用<ul><li>每个partition有自己的replication</li><li>多个partition需要选取出lead partition，lead</li><li>partition负责读写，并由zookeeper负责fail over</li></ul></li></ul><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><ul><li>C：一致性</li><li>A: 可用性</li><li>P：容错性<br>  CAP只能同时满足其中的两个，不能同时满足三个，系统设计都是在CAP中权衡；通常性能一致性，通过补偿机制来保证最终一致性</li></ul><h2 id="分布式算法"><a href="#分布式算法" class="headerlink" title="分布式算法"></a>分布式算法</h2><h3 id="两阶段提交和三阶段提交"><a href="#两阶段提交和三阶段提交" class="headerlink" title="两阶段提交和三阶段提交"></a>两阶段提交和三阶段提交</h3><p><a href="http://blog.jobbole.com/95632/">http://blog.jobbole.com/95632/</a></p><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><ul><li>1、协调者向所有参与者发送提交请求，并接收响应</li><li>2、有一个失败然后就发送回滚请求</li></ul><h4 id="三阶段提交"><a href="#三阶段提交" class="headerlink" title="三阶段提交"></a>三阶段提交</h4><ul><li>1、canCommit</li><li>2、preCommit</li><li>3、doCommmit</li><li>4、超时机制</li></ul><h4 id="paxos-raft"><a href="#paxos-raft" class="headerlink" title="paxos &amp; raft"></a>paxos &amp; raft</h4><p><a href="http://www.cnblogs.com/cchust/p/5617989.html">http://www.cnblogs.com/cchust/p/5617989.html</a><br>paxos是比较经典的分布式一致性算法；业界已经有现成的实现 zookeeper<br>raft是paxos的精简版本</p><h1 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h1><h2 id="常见的方法"><a href="#常见的方法" class="headerlink" title="常见的方法"></a>常见的方法</h2><ul><li>系统尽量做到无状态，可以通过扩容来提升服务能力</li><li>使用缓存来减轻db压力，提升响应速度</li><li>使用队列异步化一些比较耗时的操作</li><li>数据库层面还可以做读写分离</li><li>数据量特别大的时候可以对数据做，分库分表处理，也可以做分区处理（通常用在实时性要求，不高或者写入多读取少的场景）</li><li>有可能设计到分布式锁，可以使用redis来实现setNx <a href="http://blog.csdn.net/lihao21/article/details/49104695">http://blog.csdn.net/lihao21/article/details/49104695</a></li><li>限流&#x2F;过载保护</li></ul><h2 id="说到无状态，分布式session怎么做？"><a href="#说到无状态，分布式session怎么做？" class="headerlink" title="说到无状态，分布式session怎么做？"></a>说到无状态，分布式session怎么做？</h2><ul><li>复制：每台机器都有全部的session数据，机器之前互相拷贝；容量有瓶颈，同时浪费资源</li><li>hash：相同ip的请求始终落到一台后端机器上，每个机器只存自己的那一份session数据就好了；宕机了一部分session就丢了，hash策略换了也比较麻烦</li><li>集中管理：做一个独立的session服务器，常见的用db或者缓存来做（redis）</li></ul><h2 id="SOA和微服务的区别？"><a href="#SOA和微服务的区别？" class="headerlink" title="SOA和微服务的区别？"></a>SOA和微服务的区别？</h2><p><a href="https://www.zhihu.com/question/37808426">https://www.zhihu.com/question/37808426</a></p><h2 id="分表的一些做法"><a href="#分表的一些做法" class="headerlink" title="分表的一些做法"></a>分表的一些做法</h2><ul><li>横切：每张表的数据结构一致，只是数据不同，通常根据用户的一些属性来分表（比如user_id）；常见的分表策略有两种<ul><li>根据分片键取模：比如  user_id % 100 &#x3D; 1 的在一张表，&#x3D;2的在另一张表；缺陷就是取模可能导致没张表的数据不均衡，同时再次扩容的时候数据迁移也是麻烦</li><li>根据分片键范围：比如 user_id &lt; 10000的在一张表，10000 - 20000 的在另一张表，缺陷就是最后一张表数据可能比较少，不均衡，同时如果想改变分片策略也很麻烦，但是扩容比较容易</li></ul></li><li>纵切：把一张大小拆分成几张小表，没张表的数据一样多，但是数据结构不一样，比如把用户表拆分核心字段表(用户名，密码，手机）和扩展字段表（积分，等级，简介等等）</li></ul><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>限流，顾名思义，即限制系统的访问流量，常见的限流算法：计数器，漏通，令牌桶</p><p><a href="http://www.cnblogs.com/clds/p/5850070.html">http://www.cnblogs.com/clds/p/5850070.html</a></p><h1 id="网络安全篇"><a href="#网络安全篇" class="headerlink" title="网络安全篇"></a>网络安全篇</h1><ul><li>XSS：跨站脚本攻击，用户输入带有一些html或者js标签，展示的时候如果不处理会有一些意想不到的效果；转义处理就好</li><li>CSRF: 跨站请求伪造，尽量不要用GET方法操作数据；数据处理的时候做权限校验；敏感操作加验证码；表单隐藏提交一个token做校验</li><li>SQL注入：比较常见，一般都是手动拼装sql导致的，通过prepare预处理的方式即可规避</li><li>DDOS：分布式拒绝服务攻击，通常没有特别好的办法，一般就是加机器</li><li>CC：重放攻击，一直访问一个比较耗时的请求，可以击垮数据库，或者占满服务器连接</li><li>文件上传漏洞：通过上传一个可执行文件，然后通过url访问执行在服务器上做破坏操作；上传文件的时候校验文件格式，另外上传的文件不要放到可执行目录(可以被解析执行的目录)</li></ul><h1 id="设计模式篇"><a href="#设计模式篇" class="headerlink" title="设计模式篇"></a>设计模式篇</h1><ul><li>单例模式：数据库连接</li><li>工厂模式：PDO创建数据库连接</li><li>代理模式：比如对缓存的封装，提供统一的接口，可以随时用redis代替memcache，对上层应用无感知</li><li>策略模式：主要是减少if-else</li><li>装饰器模式：对数据的增强</li><li>模板模式：框架里面用的比较多，比如Yii model提供的beforeSave方法</li><li>观察者模式：队列里就有</li><li>责任链模式：流程处理方面用的比较多</li><li>门面模式（外观模式）:<br>总结，基本上就是面向对象的5大原则</li><li>单一职责原则（SRP）：一个类只做一件时间</li><li>开放封闭原则（OCP）：对扩展开放，对修改关闭</li><li>里氏替换原则（LSP）：子类可以当做一个父类</li><li>依赖倒置原则（DIP）：高层模块不要依赖底层模块；面向接口编程，不依赖具体实现</li><li>接口隔离原则（ISP）：使用多个专门的接口比使用单个接口要好的多</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="PHP变量的实现以及内存回收"><a href="#PHP变量的实现以及内存回收" class="headerlink" title="PHP变量的实现以及内存回收"></a>PHP变量的实现以及内存回收</h2><p>变量实现：<a href="http://www.cunmou.com/phpbook/2.md">http://www.cunmou.com/phpbook/2.md</a><br>内存管理：<a href="http://www.cunmou.com/phpbook/3.md">http://www.cunmou.com/phpbook/3.md</a></p><h2 id="PHP数组的底层实现"><a href="#PHP数组的底层实现" class="headerlink" title="PHP数组的底层实现"></a>PHP数组的底层实现</h2><p><a href="http://www.cunmou.com/phpbook/8.md">http://www.cunmou.com/phpbook/8.md</a></p><h2 id="PHP扩展可以做连接池吗？"><a href="#PHP扩展可以做连接池吗？" class="headerlink" title="PHP扩展可以做连接池吗？"></a>PHP扩展可以做连接池吗？</h2><p>可以，参考模块的加载流程，在MINIT方法里申请资源，MSHUTDOWN里面销毁资源<br><a href="http://www.cunmou.com/phpbook/1.3.md">http://www.cunmou.com/phpbook/1.3.md</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h1&gt;&lt;h2 id=&quot;PHP如何实现类自动加载？&quot;&gt;&lt;a href=&quot;#PHP如何实现类自动加载？&quot; class=&quot;headerlink&quot; title=&quot;PHP如何实现类自动加载？&quot;&gt;&lt;/a&gt;PHP如何实现类自动加载？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;设置自动加载目录 set_include_path(String $path)。&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;set_include_path&lt;/span&gt;(&lt;span class=&quot;title function_ invoke__&quot;&gt;dirname&lt;/span&gt;(__file__) . &lt;span class=&quot;string&quot;&gt;&amp;#x27;/classes&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;修改php.ini文件include_path选项&lt;/li&gt;
&lt;li&gt;写一个__autoload($class)方法。&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__autoload&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$class&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt; = &lt;span class=&quot;title function_ invoke__&quot;&gt;dirname&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;) . &lt;span class=&quot;string&quot;&gt;&amp;quot;/autoload/&lt;span class=&quot;subst&quot;&gt;$class&lt;/span&gt;.php&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;title function_ invoke__&quot;&gt;file_exists&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;quot;class &lt;span class=&quot;subst&quot;&gt;$class&lt;/span&gt; can not load&#92;n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title function_ invoke__&quot;&gt;B&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;写一个加载器，然后用spl_autoload_register方法注册。&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;DEFINE&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;ROOT_PATH&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;title function_ invoke__&quot;&gt;dirname&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Loader&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$class&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$class&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; - &lt;span class=&quot;title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Controller&amp;#x27;&lt;/span&gt;)) == &lt;span class=&quot;string&quot;&gt;&amp;#x27;Controller&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt; = ROOT_PATH . &lt;span class=&quot;string&quot;&gt;&amp;#x27;/Controllers/&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$class&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; - &lt;span class=&quot;title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Model&amp;#x27;&lt;/span&gt;)) == &lt;span class=&quot;string&quot;&gt;&amp;#x27;Model&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt; = ROOT_PATH . &lt;span class=&quot;string&quot;&gt;&amp;#x27;/Models/&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt; = ROOT_PATH . &lt;span class=&quot;string&quot;&gt;&amp;#x27;/Components/&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt; .= &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;$class&lt;/span&gt;.php&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title function_ invoke__&quot;&gt;file_exists&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$path&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;spl_autoload_register&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Loader&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;load&amp;#x27;&lt;/span&gt;), &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$controller&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;AController&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐第四种，原因如下&lt;/p&gt;
&lt;p&gt;第一第二种不够灵活&lt;/p&gt;
&lt;p&gt;第三种灵活，但是__autoload只能被重写一次&lt;/p&gt;
&lt;p&gt;第四种相对灵活，而且在引用第三方差价或者工具的时候有非常明显的优势&lt;/p&gt;
&lt;h2 id=&quot;include-include-once-require-require-once的区别？&quot;&gt;&lt;a href=&quot;#include-include-once-require-require-once的区别？&quot; class=&quot;headerlink&quot; title=&quot;include&amp;#x2F;include_once&amp;#x2F;require&amp;#x2F;require_once的区别？&quot;&gt;&lt;/a&gt;include&amp;#x2F;include_once&amp;#x2F;require&amp;#x2F;require_once的区别？&lt;/h2&gt;&lt;p&gt;include在文件不存在的时候会打印警告信息然后继续执行，而require会终止程序，相对来说include效率更高&lt;/p&gt;
&lt;p&gt;include_once和require_once在加载文件之前都会先判断文件是否已经被加载过，相对来说效率低一些&lt;/p&gt;</summary>
    
    
    
    
    <category term="PHP" scheme="http://kennethfan.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>类和接口</title>
    <link href="http://kennethfan.github.io/2017/03/21/%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://kennethfan.github.io/2017/03/21/%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</id>
    <published>2017-03-21T13:45:08.000Z</published>
    <updated>2017-06-05T12:40:26.000Z</updated>
    
    
    
    
    
    <category term="Java" scheme="http://kennethfan.github.io/tags/Java/"/>
    
    <category term="Effective Java" scheme="http://kennethfan.github.io/tags/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title>对于所有对象都通用的方法</title>
    <link href="http://kennethfan.github.io/2017/03/20/%E5%AF%B9%E4%BA%8E%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E9%83%BD%E9%80%9A%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://kennethfan.github.io/2017/03/20/%E5%AF%B9%E4%BA%8E%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E9%83%BD%E9%80%9A%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2017-03-20T14:31:20.000Z</published>
    <updated>2017-06-05T12:40:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="覆盖equals时请遵守通用约定"><a href="#覆盖equals时请遵守通用约定" class="headerlink" title="覆盖equals时请遵守通用约定"></a>覆盖equals时请遵守通用约定</h1><p>不覆盖equals方法的几种情况</p><ul><li>类的每个实例本质上都是唯一的；例如Thead。</li><li>不关心类是否提供了”逻辑相等（logical equality）”的测试功能；例如Rondom。</li><li>超类已经覆盖了equals，从超类继承过来的行为对于子类也是合适的；例如大多数Set都实现从AbtractSet继承的equals实现。</li><li>类是私有的或者包级私有的，可以确定它的equals方法永远不会调用。</li></ul><p>什么时候应该覆盖Object.equals呢？<strong>如果类具有自己特有的”逻辑相等”概念，而且超类还没有覆盖equals以实现期望的行为，这时候我们就需要覆盖equals方法</strong>。</p><p>覆盖eqauls方法需要遵守的通用约定：</p><ul><li>自反性（reflexive）。对于任何非null的引用值x，x.equals(x)必须返回true</li><li>对称性（symmetric）。对于任何非null的引用值x和y，当且仅当y.equas(x)返回true时，x.equals(y)必须返回true。</li><li>传递性（transitive）。对于任何非null的引用值x、y和z，如果x.equals(y)返回true且y.equals(z)也返回true，那么x.equals(z)也必须返回true。</li><li>一致性（consistent）。对于任何非null的引用值x和y，只要equals的比较操作在对象所用的信息没有被修改，多次调用x.equals(y)就会一致地返回true或者false。</li></ul><span id="more"></span><p>一些诀窍：</p><ul><li>使用&#x3D;&#x3D;操作符检查”参数是否为这个对象的引用”。如果是则返回 true。</li><li>使用instanceof操作符检查”参数是否为正确的类型”。如果不是则返回 false。</li><li>把参数转换成正确的类型。</li><li>对于该类种的每个”关键（significant）”域，检查参数中的域是否与该对象中对应的域相匹配。如果这些测试全部成功，则返回true；否则返回false。</li><li>编写完成了equals方法之后，应该确认三个问题：是否对称的、传递的、一致的？</li></ul><p>一些告诫：</p><ul><li>覆盖equals时总要覆盖hashCode</li><li>不要企图让equals方法过于智能</li><li>不要将equals声明中的Object对象替换为其他的类型。</li></ul><h1 id="覆盖equals时总要覆盖hashCode"><a href="#覆盖equals时总要覆盖hashCode" class="headerlink" title="覆盖equals时总要覆盖hashCode"></a>覆盖equals时总要覆盖hashCode</h1><p>相等的对象必须具有相等的散列码（hash code）</p><h1 id="始终要覆盖toString"><a href="#始终要覆盖toString" class="headerlink" title="始终要覆盖toString"></a>始终要覆盖toString</h1><p>提供好的toString实现可以使类用起来更加舒适。</p><h1 id="谨慎的覆盖clone"><a href="#谨慎的覆盖clone" class="headerlink" title="谨慎的覆盖clone"></a>谨慎的覆盖clone</h1><p>考虑使用拷贝构造器替代clone</p><h1 id="考虑实现Comparable接口"><a href="#考虑实现Comparable接口" class="headerlink" title="考虑实现Comparable接口"></a>考虑实现Comparable接口</h1><p>约定sng（表达式）会根据(expression)的值为负值、零和正直分别返回-1、0或1。</p><p>实现comparable的一些约定</p><ul><li>必须确保所有的x和y都满足sgn(x.compareTo(y)) &#x3D;&#x3D; -sgn(y.compareTo(x))</li><li>比较关系是可传递的：（x.compareTo(y) &gt;0 &amp;&amp; y.compareTo(x) &gt; 0）则x.compareTo(z) &gt; 0</li><li>确保x.compareTo(y) &#x3D;&#x3D; 0则sgn(x.compareTo(z)) &#x3D;&#x3D; sgn(y.compareTo(z))</li><li>强烈建议(x.compareTo(y) &#x3D;&#x3D; 0) &#x3D;&#x3D; (x.equals(y))</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;覆盖equals时请遵守通用约定&quot;&gt;&lt;a href=&quot;#覆盖equals时请遵守通用约定&quot; class=&quot;headerlink&quot; title=&quot;覆盖equals时请遵守通用约定&quot;&gt;&lt;/a&gt;覆盖equals时请遵守通用约定&lt;/h1&gt;&lt;p&gt;不覆盖equals方法的几种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类的每个实例本质上都是唯一的；例如Thead。&lt;/li&gt;
&lt;li&gt;不关心类是否提供了”逻辑相等（logical equality）”的测试功能；例如Rondom。&lt;/li&gt;
&lt;li&gt;超类已经覆盖了equals，从超类继承过来的行为对于子类也是合适的；例如大多数Set都实现从AbtractSet继承的equals实现。&lt;/li&gt;
&lt;li&gt;类是私有的或者包级私有的，可以确定它的equals方法永远不会调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么时候应该覆盖Object.equals呢？&lt;strong&gt;如果类具有自己特有的”逻辑相等”概念，而且超类还没有覆盖equals以实现期望的行为，这时候我们就需要覆盖equals方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;覆盖eqauls方法需要遵守的通用约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自反性（reflexive）。对于任何非null的引用值x，x.equals(x)必须返回true&lt;/li&gt;
&lt;li&gt;对称性（symmetric）。对于任何非null的引用值x和y，当且仅当y.equas(x)返回true时，x.equals(y)必须返回true。&lt;/li&gt;
&lt;li&gt;传递性（transitive）。对于任何非null的引用值x、y和z，如果x.equals(y)返回true且y.equals(z)也返回true，那么x.equals(z)也必须返回true。&lt;/li&gt;
&lt;li&gt;一致性（consistent）。对于任何非null的引用值x和y，只要equals的比较操作在对象所用的信息没有被修改，多次调用x.equals(y)就会一致地返回true或者false。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://kennethfan.github.io/tags/Java/"/>
    
    <category term="Effective Java" scheme="http://kennethfan.github.io/tags/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title>创建和销毁对象</title>
    <link href="http://kennethfan.github.io/2017/03/19/%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    <id>http://kennethfan.github.io/2017/03/19/%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/</id>
    <published>2017-03-19T03:45:24.000Z</published>
    <updated>2017-06-05T12:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考虑用静态工厂方法代替构造器"><a href="#考虑用静态工厂方法代替构造器" class="headerlink" title="考虑用静态工厂方法代替构造器"></a>考虑用静态工厂方法代替构造器</h1><p>  对于类而言，为了让客户端获取它的每一个实例，最常用的方法就是提供一个公有的构造器。还有一种方法，也应该在每个程序员的工具箱中占有一席之地。类可以提供一个公有的静态工厂方法，它只是一个返回类的实例的静态方法。下面是一个来自Boolean的简单示例。这个方法将boolean基本类型值转换成了一个Boolean对象引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">valueOf</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b ? Boolean.TRUE : Boolean.FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  注意，静态工厂方法与设计模式中的工厂方法模式不同。</p><p>  类可以通过静态工厂方法来提供它的客户端，而不是通过构造器。提供静态方法而不是公有的构造器，这样做有几大优势。</p><span id="more"></span><h2 id="静态工厂方法与构造器不同的第一大优势在于，它们有名称"><a href="#静态工厂方法与构造器不同的第一大优势在于，它们有名称" class="headerlink" title="静态工厂方法与构造器不同的第一大优势在于，它们有名称"></a>静态工厂方法与构造器不同的第一大优势在于，它们有名称</h2><p>   如果构造器的参数本身没有确切的描述正被返回的对象，那么具有适当名称的静态工厂会更容易使用，产生的客户端代码也更容易阅读。</p><h2 id="静态工厂方法与构造器不同的第二大优势在于，不必每次调用它们的时候都创建一个对象"><a href="#静态工厂方法与构造器不同的第二大优势在于，不必每次调用它们的时候都创建一个对象" class="headerlink" title="静态工厂方法与构造器不同的第二大优势在于，不必每次调用它们的时候都创建一个对象"></a>静态工厂方法与构造器不同的第二大优势在于，不必每次调用它们的时候都创建一个对象</h2><p>  静态工厂方法能够为重复的调用返回相同对象，这样有助于类总能够严格控制在某个时刻哪些实例应该存在。这种类被称作实例受控的类（instance-controlled）。</p><h2 id="静态工厂方法与构造器不同的第三大优势在于，他们可以返回原返回类型的任何子类型对象"><a href="#静态工厂方法与构造器不同的第三大优势在于，他们可以返回原返回类型的任何子类型对象" class="headerlink" title="静态工厂方法与构造器不同的第三大优势在于，他们可以返回原返回类型的任何子类型对象"></a>静态工厂方法与构造器不同的第三大优势在于，他们可以返回原返回类型的任何子类型对象</h2><p>   这种灵活性的一种应用是，API可以返回对象，同时又不会使对象的类变成公有的。以这种方式隐藏实现类会使API变的非常简洁。这项技术适用于基于接口的框架，因为在这种框架中，接口为静态工厂方法提供了自然返回类型。接口不能有静态方法，因此按照惯例，接口Type的静态工厂方法被放在一个名为Types的不可实例化的类中。例如，Java Collections Framework的集合接口有32个便利实现，分别提供了不可修改的集合，同步集合等等。</p><h2 id="静态工厂方法的第四大优势在于，在创建参数化类型实例的时候，它们使代码变得更加简历。"><a href="#静态工厂方法的第四大优势在于，在创建参数化类型实例的时候，它们使代码变得更加简历。" class="headerlink" title="静态工厂方法的第四大优势在于，在创建参数化类型实例的时候，它们使代码变得更加简历。"></a>静态工厂方法的第四大优势在于，在创建参数化类型实例的时候，它们使代码变得更加简历。</h2><p>   遗憾的是，在调用参数化类的构造器时，即使类型参数很明显，也必须指明。这通常要求你接连两次提供类型参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br></pre></td></tr></table></figure><p>随着类型参数变得越来越长，越来越复杂，这一冗长的说明也很快变得痛苦起来。但是有了静态工厂方法，编译器就可以替你找到类型参数。这被称作类型推导（Type inference）。例如，假设HashMap提供了这个静态工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; HashMap&lt;K, V&gt; <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;K, V&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你就可以用下面这句简介的代码代替上面这段繁琐的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; m = HashMap.newInstance();</span><br></pre></td></tr></table></figure><h2 id="静态工厂的主要缺点在于，类如果不含公有的或者受保护的构造器，就不能被实例化"><a href="#静态工厂的主要缺点在于，类如果不含公有的或者受保护的构造器，就不能被实例化" class="headerlink" title="静态工厂的主要缺点在于，类如果不含公有的或者受保护的构造器，就不能被实例化"></a>静态工厂的主要缺点在于，类如果不含公有的或者受保护的构造器，就不能被实例化</h2><p>  对于公有的静态工厂所返回的非公有类，也同样如此。例如，要想将Collections Framework中的任何方便的实现类子类化，这是不可能的。但是这样也许会因祸得福，因为它鼓励程序员使用复合（composition），而不是继承。</p><h2 id="静态工厂方法的第二个缺点在于，它们与其他的静态方法实际上没有任何区别"><a href="#静态工厂方法的第二个缺点在于，它们与其他的静态方法实际上没有任何区别" class="headerlink" title="静态工厂方法的第二个缺点在于，它们与其他的静态方法实际上没有任何区别"></a>静态工厂方法的第二个缺点在于，它们与其他的静态方法实际上没有任何区别</h2><h1 id="遇到多个构造器参数时要考虑用构造器"><a href="#遇到多个构造器参数时要考虑用构造器" class="headerlink" title="遇到多个构造器参数时要考虑用构造器"></a>遇到多个构造器参数时要考虑用构造器</h1><p>静态工厂和构造器有个共同的局限性：它们都不能很好的扩展到大量的可选参数。</p><h2 id="重叠构（telescoping-constructor）造器模式"><a href="#重叠构（telescoping-constructor）造器模式" class="headerlink" title="重叠构（telescoping constructor）造器模式"></a>重叠构（telescoping constructor）造器模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Telescoping constructor pattern - does not scale well!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NutritionFacts</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servingSize; <span class="comment">// (ml)    required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servings;    <span class="comment">// (per container)    required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> calories;    <span class="comment">//         optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> fat;         <span class="comment">// (g)     optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> sodium;      <span class="comment">// (mg)    optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> carbohydrate; <span class="comment">// (g)     optional</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NutritionFacts</span><span class="params">(<span class="type">int</span> servingSize, <span class="type">int</span> servings)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(servingSize, servings, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NutritionFacts</span><span class="params">(<span class="type">int</span> servingSize, <span class="type">int</span> servings,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> calories)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>(servingSize, servings, calories, <span class="number">0</span>);                       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NutritionFacts</span><span class="params">(<span class="type">int</span> servingSize, <span class="type">int</span> servings,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> calories, <span class="type">int</span> fat)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>(servingSize, servings, calories, fat, <span class="number">0</span>);                    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NutritionFacts</span><span class="params">(<span class="type">int</span> servingSize, <span class="type">int</span> servings,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> calories, <span class="type">int</span> fat, <span class="type">int</span> sodium)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>(servingSize, servings, calories, fat, sodium);                   </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NutritionFacts</span><span class="params">(<span class="type">int</span> servingSize, <span class="type">int</span> servings,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> calories, <span class="type">int</span> fat, <span class="type">int</span> sodium, <span class="type">int</span> carbohydrate)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.servingSize = servingSize;</span><br><span class="line">        <span class="built_in">this</span>.servings = servings;</span><br><span class="line">        <span class="built_in">this</span>.calories = calories;</span><br><span class="line">        <span class="built_in">this</span>.fat = fat;</span><br><span class="line">        <span class="built_in">this</span>.sodium = sodium;</span><br><span class="line">        <span class="built_in">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaBeans模式"><a href="#JavaBeans模式" class="headerlink" title="JavaBeans模式"></a>JavaBeans模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaBeans Pattern -allows inconsistency, mandates mutability</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NutritionFacts</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">servingSize</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">servings</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">calories</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">fat</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sodium</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">private</span> <span class="variable">carbohydrate</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NutritionFacts</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServingSize</span><span class="params">(<span class="type">int</span> servingSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servingSize = servingSize;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServings</span><span class="params">(<span class="type">int</span> servings)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.servings = servings;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCalories</span><span class="params">(<span class="type">int</span> calories)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calories = calories;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFat</span><span class="params">(<span class="type">int</span> fat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fat = fat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSodium</span><span class="params">(<span class="type">int</span> sodium)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sodium = sodium;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarbohydrate</span><span class="params">(<span class="type">int</span> carbohydrate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Builder Pattern</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NutritionFacts</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> carbohydrate;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="comment">// required parameters;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servings;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// optional parameters;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">calories</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">fat</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sodium</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">carbohydrate</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(<span class="type">int</span> servingSize, <span class="type">int</span> servings)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="built_in">this</span>.serving = servings;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">calories</span><span class="params">(<span class="type">int</span> calories)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.calories = calories;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">fat</span><span class="params">(<span class="type">int</span> fat)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.fat = fat;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">sodium</span><span class="params">(<span class="type">int</span> sodium)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.sodium = sodium;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">carbohydrate</span><span class="params">(<span class="type">int</span> carbohydrate)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">public</span> NutritionFacts <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NutritionFacts</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">NutritionFacts</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用私有构造器或者枚举类型强化Singleton属性"><a href="#用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="用私有构造器或者枚举类型强化Singleton属性"></a>用私有构造器或者枚举类型强化Singleton属性</h1><p>Singleton指仅仅被实例化一次的类。在Java 1.5发行版本之前，实现Singleton有两种方法。</p><h2 id="第一种：公有静态域有个final域"><a href="#第一种：公有静态域有个final域" class="headerlink" title="第一种：公有静态域有个final域"></a>第一种：公有静态域有个final域</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Singleton with public final field</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elvis</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Elvis</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Elvis</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Elvis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do sth;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveTheBuilding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do sth;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种：公有的成员是个静态工厂方法"><a href="#第二种：公有的成员是个静态工厂方法" class="headerlink" title="第二种：公有的成员是个静态工厂方法"></a>第二种：公有的成员是个静态工厂方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Singleton with static factory</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elvis</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Elvis</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Elvis</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Elvis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do sth;</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveTheBuilding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do sth;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Java 1.5发行版本起，实现Singleton还有第三种方法。</p><h2 id="第三种：写一个包含单个元素的枚举类型"><a href="#第三种：写一个包含单个元素的枚举类型" class="headerlink" title="第三种：写一个包含单个元素的枚举类型"></a>第三种：写一个包含单个元素的枚举类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Enum singleton - the preferred approach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Elvis</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveTheBuilding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do sth;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过私有构造器强化不和实例化的能力"><a href="#通过私有构造器强化不和实例化的能力" class="headerlink" title="通过私有构造器强化不和实例化的能力"></a>通过私有构造器强化不和实例化的能力</h1><p>  有些工具类不希望被实例化，实例对它没有任何意义。然而，在缺少显示构造器的情况下，编译器回自动提供一个公有的、无参的缺省构造器（default constructor）。对于用户而言，这个构造器与其他构造器没有任何区别。<strong>企图通过将类做成抽象类来强制该类不可被实例化，这是行不通的</strong>。该类可以被子类化，并且该子类也可以被实例化。这样做甚至会误导用户，以为这种类是专门为了集成而设计的。为类生成一个私有的构造器就可以保证它不能被实例化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Noninstantiable utility class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UtilityClass</span> &#123;</span><br><span class="line">    <span class="comment">// Suppress default constructor for noninstantiablity</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UtilityClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h1><p>  一般来说，最好能重用对象而不是在每次需要的时候就创建一个相同功能的对象。重用方式既快速又流行。如果对象是不可变得（immutable），它就是始终可以被重用。</p><h1 id="消除过期的对象引用"><a href="#消除过期的对象引用" class="headerlink" title="消除过期的对象引用"></a>消除过期的对象引用</h1><p>   消除过期的对象引用主要是方便内存回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Can you spot the &quot;memory leak&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INTIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span> &#123;</span><br><span class="line">        elements = <span class="keyword">new</span> <span class="title class_">Object</span>[DEFAULT_INTIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object e)</span> &#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EmptyStackException</span>();</span><br><span class="line">        <span class="keyword">return</span> elements[--size];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size)</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这段程序中并没有很明显的错误。无论如何测试，它都回成功地通过每一项测试，但是这个程序中隐藏着一个问题。不严格的讲，这段程序有一个”内存泄露”，随着垃圾回收器活动的增加，或者由于内存占用的不断增加，程序性能的降低会逐渐表现出来。</p><p>   在支持垃圾回收的语言中，内存泄露是很隐蔽的。如果一个对象引用被无意识地保留起来了，那么，垃圾回收机制不近不会处理这个对象，而且也不会处理这个对象所引用的所有其他对象。这类问题的修复方法很简单：一旦对象引用已经过期，只需清空这些引用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EmptyStackException</span>();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> elements[--size];</span><br><span class="line">    elements[size] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  一般而言，<strong>只要类是自己管理内存，程序员就应该警惕内存泄露问题</strong>。一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。</p><p><strong>内存泄露的另一个常见来源是缓存</strong>。一旦你把对象引用放到缓存中，它就很容易被遗忘掉，从而使得它不再有用之后很长一段时间内仍然保留在缓存中。</p><p><strong>内存泄露的第三个常见来源是监听器和其他回调</strong>。如果你实现了一个API，客户端在这个API中注册回调，去没有显式的取消注册，那么除非你采取某些动作，否则他们就会积聚。确保回调立即被当做垃圾回收的最佳方法是只保存它们的弱引用（weak reference）。</p><h1 id="避免使用终结方法"><a href="#避免使用终结方法" class="headerlink" title="避免使用终结方法"></a>避免使用终结方法</h1><p><strong>终结方法通常是不可预测的，也是很危险的，一般情况下是不必要的</strong>。使用终结方法会导致行为不稳定、降低性能，以及可移植性问题。</p><p><strong>终结方法的缺点在于不能保证会被及时地执行</strong>。从一个对象变得不可达开始，到它的终结方法被执行，所花费的这段时间是任意长的。</p><p><strong>Java语言规范不仅不保证终结方法会被及时地执行，而且根本就不保证它们会被执行</strong>。不应该依赖终结方法来更新重要的持久状态。例如，依赖终结方法来释放共享资源上的永久锁。</p><p>还有一点：<strong>终结方法有一个非常严重的性能损失</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;考虑用静态工厂方法代替构造器&quot;&gt;&lt;a href=&quot;#考虑用静态工厂方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;考虑用静态工厂方法代替构造器&quot;&gt;&lt;/a&gt;考虑用静态工厂方法代替构造器&lt;/h1&gt;&lt;p&gt;  对于类而言，为了让客户端获取它的每一个实例，最常用的方法就是提供一个公有的构造器。还有一种方法，也应该在每个程序员的工具箱中占有一席之地。类可以提供一个公有的静态工厂方法，它只是一个返回类的实例的静态方法。下面是一个来自Boolean的简单示例。这个方法将boolean基本类型值转换成了一个Boolean对象引用：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Boolean &lt;span class=&quot;title function_&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; b)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b ? Boolean.TRUE : Boolean.FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  注意，静态工厂方法与设计模式中的工厂方法模式不同。&lt;/p&gt;
&lt;p&gt;  类可以通过静态工厂方法来提供它的客户端，而不是通过构造器。提供静态方法而不是公有的构造器，这样做有几大优势。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://kennethfan.github.io/tags/Java/"/>
    
    <category term="Effective Java" scheme="http://kennethfan.github.io/tags/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title>Vim系列之插入(四)</title>
    <link href="http://kennethfan.github.io/2016/04/05/vim-insert/"/>
    <id>http://kennethfan.github.io/2016/04/05/vim-insert/</id>
    <published>2016-04-05T15:21:58.000Z</published>
    <updated>2017-06-05T12:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通插入"><a href="#普通插入" class="headerlink" title="普通插入"></a>普通插入</h1><p>i &amp; a</p><p>在普通模式下，按下按键<b>i</b>即可进入插入模式从光标处开始插入；按下<b>a</b>即可进入插入模式从光标后一个字符处开始插入。</p><h1 id="行首与行尾插入"><a href="#行首与行尾插入" class="headerlink" title="行首与行尾插入"></a>行首与行尾插入</h1><p>I &amp; A</p><p>在普通模式下，按下按键<b>I</b>即可移动光标至行首第一个非空白字符处开始插入（相当于按下^再按i）；按下按键<b>A</b>即可移动光标至行尾开始插入（相当于按下$再按a）。</p><h1 id="另起一行插入"><a href="#另起一行插入" class="headerlink" title="另起一行插入"></a>另起一行插入</h1><p>o &amp; O</p><p>在普通模式下，按下字母<b>o</b>即可另起一空白行（<i>向下</i>），从行首处开始插入（安装了插件或者语法打开之后会自动缩进排版）；按下字母<b>O</b>即可另起一行（<i>向上</i>），从行首处开始插入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;普通插入&quot;&gt;&lt;a href=&quot;#普通插入&quot; class=&quot;headerlink&quot; title=&quot;普通插入&quot;&gt;&lt;/a&gt;普通插入&lt;/h1&gt;&lt;p&gt;i &amp;amp; a&lt;/p&gt;
&lt;p&gt;在普通模式下，按下按键&lt;b&gt;i&lt;/b&gt;即可进入插入模式从光标处开始插入；按下&lt;b&gt;a&lt;/b</summary>
      
    
    
    
    
    <category term="vim" scheme="http://kennethfan.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>PHP单元测试PHPUnit</title>
    <link href="http://kennethfan.github.io/2016/03/30/phpunit/"/>
    <id>http://kennethfan.github.io/2016/03/30/phpunit/</id>
    <published>2016-03-30T02:29:40.000Z</published>
    <updated>2017-06-05T12:39:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>PHPUnit is a programmer-oriented testing framework for PHP.<br>It is an instance of the xUnit architecture for unit testing frameworks.</p><footer><strong>PHPUnit官网</strong><cite><a href="https://phpunit.de/">phpunit.de</a></cite></footer></blockquote><blockquote><p>PHPUnit是一个轻量级的PHP测试框架。它是在PHP5下面对JUnit3系列版本的完整移植，是xUnit测试框架家族的一员(它们都基于模式先锋Kent Beck的设计)。</p><footer><strong>百度百科</strong><cite><a href="http://baike.baidu.com/link?url=lQvRzx-ygpKvUJfuZryOIxK49Db5Tnan-qHhBvDiWxJRQsE3s_jFc1oIY--KAB5X2TjtijltP5OWyAXJpM1vgK">baike.baidu.com/link?url=lQvRzx-ygpKvUJfuZryOIxK49Db5Tnan-qHhBvDiWxJRQsE3s_jFc1oIY--KAB5X2TjtijltP5OWyAXJpM1vgK</a></cite></footer></blockquote><h1 id="PHPUnit的依赖"><a href="#PHPUnit的依赖" class="headerlink" title="PHPUnit的依赖"></a>PHPUnit的依赖</h1><ul><li><a href="http://php.net/manual/en/dom.setup.php">dom</a>，PHP默认启用</li><li><a href="http://php.net/manual/en/json.installation.php">json</a>，PHP默认启用</li><li><a href="http://php.net/manual/en/pcre.installation.php">pcre</a>，PHP默认启用</li><li><a href="http://php.net/manual/en/reflection.installation.php">reflection</a>，PHP默认启用</li><li><a href="http://php.net/manual/en/spl.installation.php">spl</a>，PHP默认启用</li><li><a href="http://php.net/manual/en/tokenizer.installation.php">tokenizer</a>，PHP默认启用，生成代码覆盖率测试报告用到</li><li><a href="https://xdebug.org/">xdebug</a>，需要自己安装，生成代码覆盖率测试报告用到</li><li><a href="http://php.net/manual/en/xmlwriter.installation.php">xmlwriter</a>，PHP默认启用，生成XML格式的报告用到</li></ul><p>检查PHP是否启用了这些模块可以使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m | grep <span class="string">&#x27;模块名称&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="PHPUnit的安装"><a href="#PHPUnit的安装" class="headerlink" title="PHPUnit的安装"></a>PHPUnit的安装</h1><h2 id="PHP档案包方式"><a href="#PHP档案包方式" class="headerlink" title="PHP档案包方式"></a>PHP档案包方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://phar.phpunit.de/phpunit.phar <span class="comment">#  下载档案包</span></span><br><span class="line"><span class="built_in">chmod</span> +x phpunit.phar <span class="comment">#  赋可执行权限</span></span><br><span class="line">sudo <span class="built_in">mv</span> phpunit.phar /usr/local/bin/phpunit</span><br><span class="line">phpunit --version <span class="comment">#  查看PHPUnit版本</span></span><br></pre></td></tr></table></figure><h2 id="Composer方式"><a href="#Composer方式" class="headerlink" title="Composer方式"></a>Composer方式</h2><p>Composer使用参考<a href="https://getcomposer.org/">https://getcomposer.org/</a></p><p>composer文件如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;require-dev&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;phpunit/phpunit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.0.*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="编写PHPUnit测试"><a href="#编写PHPUnit测试" class="headerlink" title="编写PHPUnit测试"></a>编写PHPUnit测试</h1><h2 id="惯例和基本步骤"><a href="#惯例和基本步骤" class="headerlink" title="惯例和基本步骤"></a>惯例和基本步骤</h2><ol><li>针对类Class的测试写在类ClassTest中。</li><li>ClassTest通常继承自PHPUnit_Framework_TestCase。</li><li>测试都是命名为test*的公用方法（也可以在放的文档注释块中使用@test标注将其标记未测试方法）。</li><li>在测试方法内，类似于assertEquals()这样的断言方法用来对实际值与预期值的匹配做出断言</li></ol><p>举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWolrdTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="string">&#x27;Hello, World&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="string">&#x27;Hello, World&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertNotEquals</span>(<span class="string">&#x27;Hello,World&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testAarry</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEmpty</span>(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="comment">//$this-&gt;assertArrayHasKey(&#x27;hello&#x27;, $arr);</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;hello&#x27;</span>] = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">        <span class="comment">//$this-&gt;assertEmpty($arr);</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertArrayHasKey</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="variable">$arr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpunit HelloWorldTest</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit 4.8.24 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line">..</span><br><span class="line"></span><br><span class="line">Time: 103 ms, Memory: 12.50Mb</span><br><span class="line"></span><br><span class="line">OK (2 tests, 4 assertions)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>@depends表示依赖关系</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="class"><span class="keyword">class</span> <span class="title">DependenceTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testEmpty</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEmpty</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testEmpty</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPush</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$arr</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="variable">$arr</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>) - <span class="number">1</span>]);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertNotEmpty</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testPush</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPop</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="title function_ invoke__">array_pop</span>(<span class="variable">$arr</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEmpty</span>(<span class="variable">$arr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOne</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testOne</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTwo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertTrue</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testProducerFirst</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertTrue</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;first&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testProducerSecond</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertTrue</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;second&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testProducerFirst</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testProducerSecond</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOneConsumer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;second&#x27;</span>),</span><br><span class="line">            <span class="title function_ invoke__">func_get_args</span>()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testProducerSecond</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testProducerFirst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testTwoConsumer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;second&#x27;</span>),</span><br><span class="line">            <span class="title function_ invoke__">func_get_args</span>()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据提供器"><a href="#数据提供器" class="headerlink" title="数据提供器"></a>数据提供器</h2><p>@dataProvider表示数据提供器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProviderTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTestAddData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dataProvider</span> getTestAddData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testAdd</span>(<span class="params"><span class="variable">$op1</span>, <span class="variable">$op2</span>, <span class="variable">$sum</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$sum</span>, <span class="variable">$op1</span> + <span class="variable">$op2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@dataProvider</span> getTestMulData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testMul</span>(<span class="params"><span class="variable">$op1</span>, <span class="variable">$op2</span>, <span class="variable">$mul</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$mul</span>, <span class="variable">$op1</span> * <span class="variable">$op2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTestMulData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对异常进行测试"><a href="#对异常进行测试" class="headerlink" title="对异常进行测试"></a>对异常进行测试</h2><p>@expectedException表示程序抛出异常</p><p>@expectedException可以结合@expectedExceptionCode、@expectedExceptionMessage、@expectedExceptionMessageRegExp使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedException</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testException</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//throw new Exception(&#x27;&#x27;, 0);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedException</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedExceptionCode</span> 404</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExceptionCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;exception&#x27;</span>, <span class="number">404</span>);</span><br><span class="line">        <span class="comment">//throw new Exception(&#x27;exception&#x27;, 30);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedException</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedExceptionMessage</span> test</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExceptionMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;test&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//throw new Exception(&#x27;abcdefg&#x27;, 0);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedException</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedExceptionMessageRegExp</span> /[a-z]+/</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExceptionMessageRegExp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;test&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//throw new Exception(&#x27;TEST&#x27;, 0);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOne</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对输出进行测试"><a href="#对输出进行测试" class="headerlink" title="对输出进行测试"></a>对输出进行测试</h2><p>expectOutputString方法可以测试程序的输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOutputOne</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOutputTwo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="PHPUnit的输出"><a href="#PHPUnit的输出" class="headerlink" title="PHPUnit的输出"></a>PHPUnit的输出</h1><p>先看一个demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SummaryTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSuccess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testFail</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testException</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@depends</span> testThree</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSkip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpunit SummaryTest</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit 4.8.24 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line">.FEF</span><br><span class="line"></span><br><span class="line">Time: 96 ms, Memory: 12.00Mb</span><br><span class="line"></span><br><span class="line">There was 1 error:</span><br><span class="line"></span><br><span class="line">1) SummaryTest::testException</span><br><span class="line">Exception:</span><br><span class="line"></span><br><span class="line">/Users/kenneth/codes/php/phpunit/SummaryTest.php:18</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">There were 2 failures:</span><br><span class="line"></span><br><span class="line">1) SummaryTest::testFail</span><br><span class="line">Failed asserting that 1 matches expected 2.</span><br><span class="line"></span><br><span class="line">/Users/kenneth/codes/php/phpunit/SummaryTest.php:13</span><br><span class="line"></span><br><span class="line">2) SummaryTest::testSkip</span><br><span class="line">Failed asserting that 1 matches expected 2.</span><br><span class="line"></span><br><span class="line">/Users/kenneth/codes/php/phpunit/SummaryTest.php:26</span><br><span class="line"></span><br><span class="line">FAILURES!</span><br><span class="line">Tests: 4, Assertions: 3, Errors: 1, Failures: 2.</span><br></pre></td></tr></table></figure><p>看输出第二行，有.FEF等，分表表示如下信息：</p><ol><li>. ：表示断言通过</li><li>F：表示断言失败</li><li>E：表示测试过程中抛出一个错误</li><li>R：表示测试被标记为有风险</li><li>S：表示测试被跳过</li><li>I ：表示测试被标记未不完整或未实现</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;PHPUnit is a programmer-oriented testing framework for PHP.&lt;br&gt;It is an instance of the xUnit architecture for unit testing frameworks.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;PHPUnit官网&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://phpunit.de/&quot;&gt;phpunit.de&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;PHPUnit是一个轻量级的PHP测试框架。它是在PHP5下面对JUnit3系列版本的完整移植，是xUnit测试框架家族的一员(它们都基于模式先锋Kent Beck的设计)。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;百度百科&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=lQvRzx-ygpKvUJfuZryOIxK49Db5Tnan-qHhBvDiWxJRQsE3s_jFc1oIY--KAB5X2TjtijltP5OWyAXJpM1vgK&quot;&gt;baike.baidu.com/link?url=lQvRzx-ygpKvUJfuZryOIxK49Db5Tnan-qHhBvDiWxJRQsE3s_jFc1oIY--KAB5X2TjtijltP5OWyAXJpM1vgK&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h1 id=&quot;PHPUnit的依赖&quot;&gt;&lt;a href=&quot;#PHPUnit的依赖&quot; class=&quot;headerlink&quot; title=&quot;PHPUnit的依赖&quot;&gt;&lt;/a&gt;PHPUnit的依赖&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/dom.setup.php&quot;&gt;dom&lt;/a&gt;，PHP默认启用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/json.installation.php&quot;&gt;json&lt;/a&gt;，PHP默认启用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/pcre.installation.php&quot;&gt;pcre&lt;/a&gt;，PHP默认启用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/reflection.installation.php&quot;&gt;reflection&lt;/a&gt;，PHP默认启用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/spl.installation.php&quot;&gt;spl&lt;/a&gt;，PHP默认启用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/tokenizer.installation.php&quot;&gt;tokenizer&lt;/a&gt;，PHP默认启用，生成代码覆盖率测试报告用到&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xdebug.org/&quot;&gt;xdebug&lt;/a&gt;，需要自己安装，生成代码覆盖率测试报告用到&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/xmlwriter.installation.php&quot;&gt;xmlwriter&lt;/a&gt;，PHP默认启用，生成XML格式的报告用到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;检查PHP是否启用了这些模块可以使用如下命令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;php -m | grep &lt;span class=&quot;string&quot;&gt;&amp;#x27;模块名称&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;PHPUnit的安装&quot;&gt;&lt;a href=&quot;#PHPUnit的安装&quot; class=&quot;headerlink&quot; title=&quot;PHPUnit的安装&quot;&gt;&lt;/a&gt;PHPUnit的安装&lt;/h1&gt;&lt;h2 id=&quot;PHP档案包方式&quot;&gt;&lt;a href=&quot;#PHP档案包方式&quot; class=&quot;headerlink&quot; title=&quot;PHP档案包方式&quot;&gt;&lt;/a&gt;PHP档案包方式&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://phar.phpunit.de/phpunit.phar &lt;span class=&quot;comment&quot;&gt;#  下载档案包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;chmod&lt;/span&gt; +x phpunit.phar &lt;span class=&quot;comment&quot;&gt;#  赋可执行权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo &lt;span class=&quot;built_in&quot;&gt;mv&lt;/span&gt; phpunit.phar /usr/local/bin/phpunit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;phpunit --version &lt;span class=&quot;comment&quot;&gt;#  查看PHPUnit版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Composer方式&quot;&gt;&lt;a href=&quot;#Composer方式&quot; class=&quot;headerlink&quot; title=&quot;Composer方式&quot;&gt;&lt;/a&gt;Composer方式&lt;/h2&gt;&lt;p&gt;Composer使用参考&lt;a href=&quot;https://getcomposer.org/&quot;&gt;https://getcomposer.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;composer文件如下&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;require-dev&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&amp;quot;phpunit/phpunit&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;5.0.*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;编写PHPUnit测试&quot;&gt;&lt;a href=&quot;#编写PHPUnit测试&quot; class=&quot;headerlink&quot; title=&quot;编写PHPUnit测试&quot;&gt;&lt;/a&gt;编写PHPUnit测试&lt;/h1&gt;&lt;h2 id=&quot;惯例和基本步骤&quot;&gt;&lt;a href=&quot;#惯例和基本步骤&quot; class=&quot;headerlink&quot; title=&quot;惯例和基本步骤&quot;&gt;&lt;/a&gt;惯例和基本步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;针对类Class的测试写在类ClassTest中。&lt;/li&gt;
&lt;li&gt;ClassTest通常继承自PHPUnit_Framework_TestCase。&lt;/li&gt;
&lt;li&gt;测试都是命名为test*的公用方法（也可以在放的文档注释块中使用@test标注将其标记未测试方法）。&lt;/li&gt;
&lt;li&gt;在测试方法内，类似于assertEquals()这样的断言方法用来对实际值与预期值的匹配做出断言&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWolrdTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PHPUnit_Framework_TestCase&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello, World&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;assertEquals&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello, World&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$string&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;assertNotEquals&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello,World&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$string&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testAarry&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$arr&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;assertEmpty&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$arr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//$this-&amp;gt;assertArrayHasKey(&amp;#x27;hello&amp;#x27;, $arr);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$arr&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&amp;#x27;world&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//$this-&amp;gt;assertEmpty($arr);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;assertArrayHasKey&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$arr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行测试命令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;phpunit HelloWorldTest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结果&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PHPUnit 4.8.24 by Sebastian Bergmann and contributors.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: 103 ms, Memory: 12.50Mb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK (2 tests, 4 assertions)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="PHP" scheme="http://kennethfan.github.io/tags/PHP/"/>
    
    <category term="PHPUnit" scheme="http://kennethfan.github.io/tags/PHPUnit/"/>
    
  </entry>
  
</feed>
